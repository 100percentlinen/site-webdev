---
layout: angular
title: Glossary
description: Brief definitions of the most important words in the Angular vocabulary
---
//- FilePath: src/angular/glossary.jade

- var lang = 'dart'
- var docsPath='/' + current.path[0]
- var docsLatest='/angular';
- var _at = '@'
- var _example = 'glossary';
include _util-fns

:marked
  Angular has a vocabulary of its own.
  Most Angular terms are everyday English words
  with a specific meaning within the Angular system.

  This glossary lists the most prominent terms
  and a few less familiar ones that have unusual or
  unexpected definitions.

  [A](#A) [B](#B) [C](#C) [D](#D) [E](#E) [F](#F) [G](#G) [H](#H) [I](#I)
  [J](#J) [K](#K) [L](#L) [M](#M) [N](#N) [O](#O) [P](#P) [Q](#Q) [R](#R)
  [S](#S) [T](#T) [U](#U) [V](#V) [W](#W) [X](#X) [Y](#Y) [Z](#Z)

.l-main-section#A

:marked
  ## Annotation
.l-sub-section
  :marked
    When unqualified, _annotation_ refers to a Dart metadata
    annotation (as opposed to, say, a type annotation).  A metadata
    annotation begins with the character `@`, followed by either a reference
    to a compile-time constant (such as [`Component`](#component)) or a call
    to a constant constructor. See the [Dart Language Guide][metadata] for
    details.

    The corresponding term in TypeScript and JavaScript is
    _decorator_.

    [metadata]: https://www.dartlang.org/guides/language/language-tour#metadata

:marked
  ## Attribute directive
.l-sub-section
  :marked
    A category of [directive](#directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    A good example of an attribute directive is the `ngClass` directive for adding and removing CSS class names.

.l-main-section#B

:marked
  ## Binding
.l-sub-section
  :marked
    Almost always refers to [Data Binding](#data-binding) and the act of
    binding an HTML object property to a data object property.

    May refer to a [dependency injection](#dependency-injection) binding
    between a "token", also referred to as a "key", and a dependency [provider](#provider).
    This more rare usage should be clear in context.

:marked
  ## Bootstrap
.l-sub-section
  :marked
    You launch an Angular application by "bootstrapping" it with the
    [bootstrap][bootstrap] method. Bootstrapping identifies an
    application's top level "root" [component](#component), which is 
    the first component that is loaded for the application, and optionally
    registers service [providers](#provider) with the [dependency injection
    system](#dependency-injection).
    For more information, see the [Setup](!{docsLatest}/guide/setup.html) page.

    [bootstrap]: !{docsLatest}/api/angular2.platform.browser/bootstrap.html

    You can bootstrap multiple apps in the same `index.html`, each with its own top level root.

.l-main-section#C
:marked
  ## camelCase
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter
    _except the first letter, which is lowercase_.

    Function, property, and method names are typically spelled in camelCase. Examples: `square`, `firstName`, `getHeroes`.

    This form is also known as **lower camel case**, to distinguish it from **upper camel case**, which is [PascalCase](#pascalcase).
    When you see "camelCase" in this documentation it always means *lower camel case*.

:marked
  ## Component
.l-sub-section
  :marked
    An Angular class responsible for exposing data to a [view](#view) and handling most of the viewâ€™s display and user-interaction logic.

    The *component* is one of the most important building blocks in the Angular system.
    It is, in fact, an Angular [directive](#directive) with a companion [template](#template).

    You apply the `!{_at}Component` !{_decoratorLink} to
    the component class, thereby attaching to the class the essential component metadata
    that Angular needs to create a component instance and render it with its template
    as a view.

    Those familiar with "MVC" and "MVVM" patterns will recognize
    the component in the role of "controller" or "view model".

.l-main-section#D
:marked
  ## dash-case
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (`-`).
    This form is also known as [kebab-case](#kebab-case).

    [Directive](#directive) selectors (like `my-app`) <span if-docs="ts">and
    the root of filenames (such as `hero-list.component.ts`)</span> are often
    spelled in dash-case.

:marked
  ## Data binding
.l-sub-section
  :marked
    Applications display data values to a user and respond to user
    actions (clicks, touches, keystrokes).

    Instead of manually pushing application data values into HTML, attaching
    event listeners, pulling changed values from the screen, and
    updating application data values, you can use data binding by declaring the relationship between an HTML widget and data source and let the
    framework handle the details.

    Angular has a rich data binding framework with a variety of data binding
    operations and supporting declaration syntax.

     Read about the forms of binding in the [Template Syntax](!{docsLatest}/guide/template-syntax.html) page:
     * [Interpolation](!{docsLatest}/guide/template-syntax.html#interpolation).
     * [Property binding](!{docsLatest}/guide/template-syntax.html#property-binding).
     * [Event binding](!{docsLatest}/guide/template-syntax.html#event-binding).
     * [Attribute binding](!{docsLatest}/guide/template-syntax.html#attribute-binding).
     * [Class binding](!{docsLatest}/guide/template-syntax.html#class-binding).
     * [Style binding](!{docsLatest}/guide/template-syntax.html#style-binding).
     * [Two-way data binding with ngModel](!{docsLatest}/guide/template-syntax.html#ngModel).

a#decorator
a#decoration
:marked
  ## Decorator | decoration
.l-sub-section
  :marked
    JavaScript terms that, in this documentation, refer to an
    [annotation](#annotation).

:marked
  ## Dependency injection
.l-sub-section
  :marked
    Dependency injection is both a design pattern and a mechanism
    for creating and delivering parts of an application to other
    parts of an application that request them.

    Angular developers prefer to build applications by defining many simple parts
    that each do one thing well and then wiring them together at runtime.

    These parts often rely on other parts. An Angular [component](#component)
    part might rely on a service part to get data or perform a calculation. When
    part "A" relies on another part "B", you say that "A" depends on "B" and
    that "B" is a dependency of "A".

    You can ask a "dependency injection system" to create "A"
    for us and handle all the dependencies.
    If "A" needs "B" and "B" needs "C", the system resolves that chain of dependencies
    and returns a fully prepared instance of "A".

    Angular provides and relies upon its own sophisticated
    [dependency injection](!{docsLatest}/guide/dependency-injection.html) system
    to assemble and run applications by "injecting" application parts
    into other application parts where and when needed.

    At the core there is an [`injector`](#injector) that returns dependency values on request.
    The expression `injector.get(token)` returns the value associated with the given token.

    A token is an Angular type (`OpaqueToken`). You rarely deal with tokens directly; most
    methods accept a class name (`Foo`) or a string ("foo") and Angular converts it
    to a token. When you write `injector.get(Foo)`, the injector returns
    the value associated with the token for the `Foo` class, typically an instance of `Foo` itself.

    During many of its operations, Angular makes similar requests internally, such as when it creates a [`component`](#component) for display.

    The `Injector` maintains an internal map of tokens to dependency values.
    If the `Injector` can't find a value for a given token, it creates
    a new value using a `Provider` for that token.

    A [provider](#provider) is a recipe for
    creating new instances of a dependency value associated with a particular token.

    An injector can only create a value for a given token if it has
    a `provider` for that token in its internal provider registry.
    Registering providers is a critical preparatory step.

    Angular registers some of its own providers with every injector.
    We can register our own providers.

    Read more in the [Dependency Injection](!{docsLatest}/guide/dependency-injection.html) page.
:marked
  ## Directive
.l-sub-section
  :marked
    An Angular class responsible for creating, reshaping, and interacting with HTML elements
    in the browser DOM. Directives are Angular's most fundamental feature.

    A Directive is almost always associated with an HTML element or attribute.
    We often refer to such an element or attribute as the directive itself.
    When Angular finds a directive in an HTML template,
    it creates the matching directive class instance
    and gives the instance control over that portion of the browser DOM.

    You can invent custom HTML markup (for example, `<my-directive>`) to
    associate with your custom directives. You add this custom markup to HTML templates
    as if you were writing native HTML. In this way, directives become extensions of
    HTML itself.

    Directives fall into one of three categories:

    1. [Components](#component) that combine application logic with an HTML template to
    render application [views]. Components are usually represented as HTML elements.
    They are the building blocks of an Angular application and the
    developer can expect to write a lot of them.

    1. [Attribute directives](#attribute-directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    1. [Structural directives](#structural-directive), a directive responsible for
    shaping or reshaping HTML layout, typically by adding, removing, or manipulating
    elements and their children.

.l-main-section#E

:marked
  ## ECMAScript
.l-sub-section
  :marked
    The [official JavaScript language specification](https://en.wikipedia.org/wiki/ECMAScript).

:marked
  ## ES2015
.l-sub-section
  :marked
    Short hand for [ECMAScript](#ecmascript) 2015.
:marked
  ## ES6
.l-sub-section
  :marked
    Short hand for [ECMAScript](#ecmascript) 2015.
:marked
  ## ES5
.l-sub-section
  :marked
    Short hand for [ECMAScript](#ecmascript) 5, the version of JavaScript run by most modern browsers.
    See [ECMAScript](#ecmascript).

a#F
a#G
a#H
.l-main-section#I
:marked
  ## Injector
.l-sub-section
  :marked
    An object in the Angular [dependency injection system](#dependency-injection)
    that can find a named "dependency" in its cache or create such a thing
    with a registered [provider](#provider).

:marked
  ## Input
.l-sub-section
  :marked
    A directive property that can be the ***target*** of a
    [property binding](!{docsLatest}/guide/template-syntax.html#property-binding) (explained in detail in the [Template Syntax](!{docsLatest}/guide/template-syntax.html) page).
    Data values flow *into* this property from the data source identified
    in the template expression to the right of the equal sign.

    See the [Input and output properties](!{docsLatest}/guide/template-syntax.html#inputs-outputs) section of the [Template Syntax](!{docsLatest}/guide/template-syntax.html) page.

:marked
  ## Interpolation
.l-sub-section
  :marked
    A form of [property data binding](#data-binding) in which a
    [template expression](#template-expression) between double-curly braces
    renders as text.  That text may be concatenated with neighboring text
    before it is assigned to an element property
    or displayed between element tags, as in this example.

  code-example(language="html" escape="html").
    <label>My current hero is {{hero.name}}</label>

  :marked
    Read more about [interpolation](!{docsLatest}/guide/template-syntax.html#interpolation) in the
    [Template Syntax](!{docsLatest}/guide/template-syntax.html) page.

.l-main-section#J
.l-main-section#K
:marked
  ## kebab-case
.l-sub-section
  :marked
    See [dash-case](#dash-case).

.l-main-section#L
:marked
  ## Lifecycle hooks
.l-sub-section
  :marked
    [Directives](#directive) and [components](#component) have a lifecycle
    managed by Angular as it creates, updates, and destroys them.

    You can tap into key moments in that lifecycle by implementing
    one or more of the lifecycle hook interfaces.

    Each interface has a single hook method whose name is the interface name prefixed with `ng`.
    For example, the `OnInit` interface has a hook method named `ngOnInit`.

    Angular calls these hook methods in the following order:
    * `ngOnChanges` - when an [input](#input)/[output](#output) binding value changes.
    * `ngOnInit` - after the first `ngOnChanges`.
    * `ngDoCheck` - developer's custom change detection.
    * `ngAfterContentInit` - after component content initialized.
    * `ngAfterContentChecked` - after every check of component content.
    * `ngAfterViewInit` - after component's view(s) are initialized.
    * `ngAfterViewChecked` - after every check of a component's view(s).
    * `ngOnDestroy` - just before the directive is destroyed.

    Read more in the [Lifecycle Hooks](!{docsLatest}/guide/lifecycle-hooks.html) page.

.l-main-section#M

:marked
  ## Module
.l-sub-section
  :marked
    In this documentation, the term _module_ refers to a Dart compilation unit, such
    as a library or package. If a Dart file has no `library` or `part`
    directive, then that file itself is a library and thus a compilation
    unit. For more information about compilation units, see
    the Libraries and Scripts chapter in the
    [Dart Language Specification](https://www.dartlang.org/docs/spec/).

a#N
.l-main-section#O

+ifDocsFor('ts|js')
  :marked
    ## Observable
  .l-sub-section
    :marked
      You can think of an observable as an array whose items arrive asynchronously over time.
      Observables help you manage asynchronous data, such as data coming from a backend service.
      Observables are used within Angular itself, including Angular's event system and its http client service.

      To use observables, Angular uses a third-party library called Reactive Extensions (RxJS).
      Observables are a proposed feature for ES 2016, the next version of JavaScript.

:marked
  ## Output
.l-sub-section
  :marked
    A directive property that can be the ***target*** of
    [event binding](!{docsLatest}/guide/template-syntax.html#event-binding).
    Events stream *out* of this property to the receiver identified
    in the template expression to the right of the equal sign.

    See the [Input and output properties](!{docsLatest}/guide/template-syntax.html#inputs-outputs) section of the [Template Syntax](!{docsLatest}/guide/template-syntax.html) page.

.l-main-section#P

:marked
  ## PascalCase
.l-sub-section
  :marked
    The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples: `Person`, `HeroDetailComponent`.

    This form is also known as **upper camel case** to distinguish it from **lower camel case**, which is simply called [camelCase](#camelcase). In this documentation, "PascalCase" means *upper camel case* and  "camelCase" means *lower camel case*.

:marked
  ## Pipe
.l-sub-section
  :marked
    An Angular pipe is a function that transforms input values to output values for
    display in a [view](#view). Use the `!{_at}Pipe` !{_decoratorLink}
    to associate the pipe function with a name. You then use that
    name in your HTML to declaratively transform values on screen.

    Here's an example that uses the built-in `currency` pipe to display
    a numeric value in the local currency.

  code-example(language="html" escape="html").
    <label>Price: </label>{{product.price | currency}}
  :marked
    Read more in the page on [pipes](!{docsLatest}/guide/pipes.html).

:marked
  ## Provider
.l-sub-section
  :marked
    A _provider_ creates a new instance of a dependency for the
    [dependency injection](#dependency-injection) system.
    It relates a lookup token to code&mdash;sometimes called a "recipe"&mdash;that can create a dependency value.

a#Q
.l-main-section#R

:marked
  ## Router
.l-sub-section
  :marked
    Most applications consist of many screens or [views](#view).
    The user navigates among them by clicking links and buttons,
    and performing other similar actions that cause the application to
    replace one view with another.

    The Angular [component router](!{docsLatest}/guide/router.html) is a richly featured mechanism for configuring and managing the entire view navigation process including the creation and destruction
    of views.

  +ifDocsFor('ts|js')
    :marked
      In most cases, components become attached to a [router](#router) by means
      of a `RouterConfig` that defines routes to views.

      A [routing component's](#routing-component) template has a `RouterOutlet` element
      where it can display views produced by the router.

      Other views in the application likely have anchor tags or buttons with `RouterLink`
      directives that users can click to navigate.

      For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.

:marked
  ## Routing component
.l-sub-section
  :marked
    An Angular [component](#component) with a `RouterOutlet` that displays views based on router navigations.

    For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.

.l-main-section#S

a#snake-case
:marked
  ## snake_case

.l-sub-section
  :marked
    The practice of writing compound words or phrases such that an
    underscore (`_`) separates one word from the next. This form is also known as **underscore case**.

    Dart package names and filenames are spelled in snake_case,
    [by convention](https://www.dartlang.org/guides/language/effective-dart/style#do-name-libraries-and-source-files-using-lowercasewithunderscores).
    Examples: `angular_tour_of_heroes`, `app_component.dart`.

:marked
  ## Service
.l-sub-section
  :marked
    For data or logic that is not associated
    with a specific view or that you want to share across components, build services.

    Applications often require services such as a hero data service or a logging service.

    A service is a class with a focused purpose.
    We often create a service to implement features that are
    independent from any specific view,
    provide shared data or logic across components, or encapsulate external interactions.

    For more information, see the [Services](!{docsLatest}/tutorial/toh-pt4.html) page of the [Tour of Heroes](!{docsLatest}/tutorial/) tutorial.

:marked
  ## Structural directive
.l-sub-section
  :marked
    A category of [directive](#directive) that can
    shape or reshape HTML layout, typically by adding, removing, or manipulating
    elements and their children; for example, the `ngIf` "conditional element" directive and the `ngFor` "repeater" directive.

    Read more in the [Structural Directives](!{docsLatest}/guide/structural-directives.html) page.

.l-main-section#T
:marked
  ## Template
.l-sub-section
  :marked
    A template is a chunk of HTML that Angular uses to render a [view](#view) with
    the support and continuing guidance of an Angular [directive](#directive),
    most notably a [component](#component).

:marked
  ## Template expression
.l-sub-section
  :marked
    An expression is a !{_Lang}-like syntax that Angular evaluates within
    a [data binding](#data-binding).

    Read about how to write template expressions
    in the [Template Syntax](!{docsLatest}/guide/template-syntax.html#template-expressions) page.

:marked
  ## Transpile
.l-sub-section
  :marked
    The process of transforming code written in one language
    (for example, TypeScript) into another (for example, [ES5](#es5)).

 :marked
  ## TypeScript
.l-sub-section
  :marked
    A version of JavaScript that supports most [ECMAScript 2015](#es2015)
    language features such as [decorators](#decorator).
    Read more about TypeScript at [typescript.org](http://www.typescriptlang.org/).

a#U
.l-main-section#V

:marked
  ## View
.l-sub-section
  :marked
    A view is a portion of the screen that displays information and responds
    to user actions such as clicks, mouse moves, and keystrokes.

    Angular renders a view under the control of one or more [directives](#directive),
    especially  [component](#component) directives and their companion [templates](#template).
    The component plays such a prominent role that it's often
    convenient to refer to a component as a view.

    Views often contain other views and any view might be loaded and unloaded
    dynamically as the user navigates through the application, typically
    under the control of a [router](#router).

a#W
a#X
a#Y
.l-main-section#Z

:marked
  ## Zone
.l-sub-section
  :marked
    Zones are a mechanism for encapsulating and intercepting
    a Dart application's asynchronous activity.

    Learn more about zones in [this article][zones].

    [zones]: https://www.dartlang.org/articles/libraries/zones
