---
layout: angular
title: Services
description: Create a reusable service to manage the hero data calls.
prevpage:
  title: Multiple Components
  url: /angular/tutorial/toh-pt3
nextpage:
  title: Routing
  url: /angular/tutorial/toh-pt5
---
//- FilePath: src/angular/tutorial/toh-pt4.jade
include ../_util-fns

:marked
  As the Tour of Heroes app evolves, you'll add more components that need access to hero data.

  Instead of copying and pasting the same code over and over,
  you'll create a single reusable data service and
  inject it into the components that need it.
  Using a separate service keeps components lean and focused on supporting the view,
  and makes it easy to unit-test components with a mock service.

  Because data services are invariably asynchronous,
  you'll finish the page with a *!{_Promise}*-based version of the data service.

  When you're done with this page, the app should look like this <live-example></live-example>.

.l-main-section
:marked
  ## Where you left off

  Before continuing with the Tour of Heroes, verify that you have the following structure.
  If not, go back to the previous pages.

.filetree
  .file angular_tour_of_heroes
  .children
    .file lib
    .children
      .file app_component.dart
      .file hero.dart
      .file hero_detail_component.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css
    .file pubspec.yaml

include keep-app-running

:marked
  ## Creating a hero service

  The stakeholders want to show the heroes in various ways on different pages.
  Users can already select a hero from a list.
  Soon you'll add a dashboard with the top performing heroes and create a separate view for editing hero details.
  All three views need hero data.

  At the moment, the `AppComponent` defines mock heroes for display.
  However, defining heroes is not the component's job,
  and you can't easily share the list of heroes with other components and views.
  In this page, you'll move the hero data acquisition business to a single service that provides the data and
  share that service with all components that need the data.

  ### Create _HeroService_

  Create a file in the `app` folder called `hero_service.dart`.

.l-sub-section
  :marked
    The naming convention for service files is the service name in lowercase followed by `_service`.
    For a multi-word service name, use lower [snake_case](../guide/glossary.html#snake_case).
    For example, the filename for `SpecialSuperHeroService` is `special_super_hero_service.dart`.

:marked
  Name the class `HeroService`.

+makeExcerpt('lib/hero_service_1.dart (starting point)', 'empty-class')

:marked
  ### Injectable services

  Notice that you used an `@Injectable()` annotation.

.callout.is-helpful
  :marked
    Don't forget the parentheses. Omitting them leads to an error that's difficult to diagnose.

:marked
  ### Getting hero data

  Add a `getHeroes()` method stub.

+makeExcerpt('lib/hero_service_1.dart (getHeroes stub)', 'getHeroes-stub')

:marked
  The `HeroService` could get `Hero` data from anywhere&mdash;a
  web service, local storage, or a mock data source.
  Removing data access from the component means
  you can change your mind about the implementation anytime,
  without touching the components that need hero data.

  ### Move the mock hero data

  Cut the `mockHeroes` list from `app_component.dart` and paste it to a new file in the `lib` folder named `mock_heroes.dart`.
  Additionally, copy the `import 'hero.dart'` statement because the heroes list uses the `Hero` class.

+makeExample('lib/mock_heroes.dart')

:marked
  In `app_component.dart`, where you cut away the `mockHeroes` list,
  add an uninitialized `heroes` property:

+makeExcerpt('lib/app_component_1.dart (excerpt)', 'heroes-prop')

:marked
  ### Return mocked hero data

  Back in the `HeroService`, import the mock `mockHeroes` and return it from the `getHeroes()` method.
  The `HeroService` looks like this:

+makeExcerpt('lib/hero_service_1.dart', 'final')

:marked
  ### Use the hero service

  You're ready to use the `HeroService` in other components, starting with `AppComponent`.

  Import the `HeroService` so that you can reference it in the code.

+makeExcerpt('lib/app_component.dart', 'hero-service-import')

:marked
  ### Don't use *new* with the *HeroService*

  How should the `AppComponent` acquire an instance of `HeroService`?

  You could create a new instance of the `HeroService` with `new` like this:

+makeExcerpt('lib/app_component_1.dart (excerpt)', 'new-service')

:marked
  However, this option isn't ideal for the following reasons:

  * The component has to know how to create a `HeroService`.
    If you change the `HeroService` constructor,
    you must find and update every place you created the service.
    Patching code in multiple places is error prone and adds to the test burden.
  * You create a service each time you use `new`.
    What if the service caches heroes and shares that cache with others?
    You couldn't do that.
  * With the `AppComponent` locked into a specific implementation of the `HeroService`,
    switching implementations for different scenarios, such as operating offline or using
    different mocked versions for testing, would be difficult.


  ### Inject *HeroService*

  Instead of using the *new* expression, add these lines:

  * Add a private `HeroService` property.
  * Add a constructor that initializes the private property.
  * Add `HeroService` to the component's `providers` metadata.

  Here are the property and the constructor:

+makeExcerpt('lib/app_component_1.dart (constructor)', 'ctor')

:marked
  The constructor does nothing except set the `_heroService` property.
  The `HeroService` type of `_heroService` identifies the constructor's parameter as
  a `HeroService` injection point.

  Now Angular knows to supply a `HeroService` instance when it creates a new `AppComponent`.

.l-sub-section
  :marked
    Read more about dependency injection in the [Dependency Injection](../guide/dependency-injection.html) page.

:marked
  The *injector* doesn't know yet how to create a `HeroService`.
  If you ran the code now, Angular would fail with this error:

code-example(format="nocode").
  EXCEPTION: No provider for HeroService! (AppComponent -> HeroService)

:marked
  To teach the injector how to make a `HeroService`,
  add the following `providers` list as the last parameter of the `@Component` annotation.

+makeExcerpt('lib/app_component_1.dart', 'providers')

:marked
  The `providers` parameter tells Angular to create a fresh instance of the `HeroService` when it creates an `AppComponent`.
  The `AppComponent`, as well as its child components, can use that service to get hero data.

a#child-component
:marked
  ### The *AppComponent.getHeroes()* method

  The service is in a `heroService` private variable.

  You could call the service and get the data in one line.

+makeExcerpt('lib/app_component_1.dart', 'get-heroes', '')

:marked
  You don't really need a dedicated method to wrap one line.  Write it anyway:

+makeExcerpt('lib/app_component_1.dart', 'getHeroes')

a#oninit
:marked
  ### The *ngOnInit* lifecycle hook

  `AppComponent` should fetch and display hero data with no issues.

  You might be tempted to call the `getHeroes()` method in a constructor, but
  a constructor should not contain complex logic,
  especially a constructor that calls a server, such as a data access method.
  A constructor is for simple initializations, like wiring constructor parameters to properties.

  To have Angular call `getHeroes()`, you can implement the Angular *ngOnInit lifecycle hook*.
  Angular offers interfaces for tapping into critical moments in the component lifecycle:
  at creation, after each change, and at its eventual destruction.

  Each interface has a single method. When the component implements that method, Angular calls it at the appropriate time.

.l-sub-section
  :marked
    Read more about lifecycle hooks in the [Lifecycle Hooks](../guide/lifecycle-hooks.html) page.

:marked
  Add `OnInit` to the list of interfaces implemented by `AppComponent`:

+makeExcerpt('lib/app_component_1.dart (ngOnInit method stub)', 'on-init')

:marked
  Write an `ngOnInit()` method with the initialization logic inside. Angular will call it
  at the right time. In this case, initialize by calling `getHeroes()`.

+makeExcerpt('lib/app_component_1.dart', 'ng-on-init', '')

:marked
  The app should run as expected, showing a list of heroes and a hero detail view
  when you click on a hero name.

  <a id="async"></a>
  ## Async hero services

  The `HeroService` returns a list of mock heroes immediately;
  its `getHeroes()` signature is synchronous.

+makeExcerpt('lib/app_component_1.dart', 'get-heroes')

:marked
  Eventually, the hero data will come from a remote server.
  When using a remote server, users don't have to wait for the server to respond;
  additionally, you aren't able to block the UI during the wait.

  To coordinate the view with the response,
  you can use *!{_Promise}s*, which is an asynchronous
  technique that changes the signature of the `getHeroes()` method.

  ### The hero service returns a _Future_

  A [Future][] represents a future computation or value. Using a `Future`, you
  can register callback functions that will be invoked when the computation
  completes (and results are ready), or when a computational error needs to be
  reported.

  [Future]: https://api.dartlang.org/stable/latest/dart-async/Future-class.html

.l-sub-section
  :marked
    This is a simplified explanation. Read more about Futures in the
    Dart language tutorial on [Asynchronous Programming: Futures][].
    
    [Asynchronous Programming: Futures]: https://www.dartlang.org/tutorials/language/futures

:marked
  Update the `HeroService` with this `Future`-returning `getHeroes()` method:

+makeExcerpt('lib/hero_service.dart (excerpt)', 'get-heroes')

:marked
  You're still mocking the data. You're simulating the behavior of an ultra-fast, zero-latency server,
  by returning a `Future` whose mock heroes become available immediately.

.l-sub-section
  :marked
    Marking a method as `async` automatically sets the return type to `Future`.
    For more information on `async` functions, see
    [Declaring async functions](https://www.dartlang.org/docs/dart-up-and-running/ch02.html#async) in the Dart language tour.

:marked
  ### Processing the _Future_

  As a result of the change to `HeroService`, the app component's `heroes`
  property is now a `Future` rather than a list of heroes.  You have to change
  the implementation to process the `Future` result when it completes.  When
  the `Future` completes successfully, you'll have heroes to display.
  
  Here is the current implementation:

+makeExcerpt('lib/app_component_1.dart (synchronous getHeroes)', 'getHeroes')

:marked
  Pass the callback function as an argument to the `Future.then()` method:

+makeExcerpt('lib/app_component_2.dart (asynchronous getHeroes)', 'getHeroes')

:marked
  The callback sets the component's `heroes` property to the list of heroes returned by the service.

  The app still runs, showing a list of heroes, and
  responding to a name selection with a detail view.

  ## Use _async_/_await_
  
  An asynchronous method containing one or more `Future.then()` methods can be
  difficult to read and understand. Thankfully, Dart's `async`/`await`
  language feature, lets you write asynchronous code that looks just
  like synchronous code. Rewrite `getHeroes()`:
  
+makeExcerpt('lib/app_component.dart (revised async/await getHeroes)', 'getHeroes')

:marked
  The `Future<Null>` return type is the asynchronous equivalent of `void`.
  
  Read more about asynchronous programming using `async`/`await` in the [Async
  and await][] section of the Dart language tutorial on [Asynchronous
  Programming: Futures][].
    
  [Asynchronous Programming: Futures]: https://www.dartlang.org/tutorials/language/futures
  [Async and await]: https://www.dartlang.org/tutorials/language/futures#async-and-await

.l-sub-section
  :marked
    At the end of this page, [Appendix: Take it slow](#slow) describes what the app might be like with a poor connection.

:marked
  ## Review the app structure

  Verify that you have the following structure after all of your refactoring:

.filetree
  .file angular_tour_of_heroes
  .children
    .file lib
    .children
      .file app_component.dart
      .file hero.dart
      .file hero_detail_component.dart
      .file hero_service.dart
      .file mock_heroes.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css
    .file pubspec.yaml

:marked
  Here are the code files discussed in this page.

+makeTabs(`
  toh-4/dart/lib/hero_service.dart,
  toh-4/dart/lib/app_component.dart,
  toh-4/dart/lib/mock_heroes.dart
  `,'',`
  lib/hero_service.dart,
  lib/app_component.dart,
  lib/mock_heroes.dart
  `)

:marked
  ## The road you've travelled

  Here's what you achieved in this page:

  * You created a service class that can be shared by many components.
  * You used the `ngOnInit` lifecycle hook to get the hero data when the `AppComponent` activates.
  * You defined the `HeroService` as a provider for the `AppComponent`.
  * You created mock hero data and imported them into the service.
  * You designed the service to return a `Future` and the component to get the data from the `Future`.

  Your app should look like this <live-example></live-example>.

  ## The road ahead

  The Tour of Heroes has become more reusable using shared components and services.
  The next goal is to create a dashboard, add menu links that route between the views, and format data in a template.
  As the app evolves, you'll discover how to design it to make it easier to grow and maintain.

  Read about the Angular component router and navigation among the views in the [next tutorial](toh-pt5.html) page.

.l-main-section#slow
:marked
  ## Appendix: Take it slow

  To simulate a slow connection,
  add the following `getHeroesSlowly()` method to the `HeroService`.

+makeExcerpt('lib/hero_service.dart (getHeroesSlowly)', 'get-heroes-slowly')

:marked
  Like `getHeroes()`, it also returns a `Future`, but this `Future` waits two
  seconds before completing.

  Back in the `AppComponent`, replace `getHeroes()` with `getHeroesSlowly()`
  and see how the app behaves.
