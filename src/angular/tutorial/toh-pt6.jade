---
layout: angular
title: HTTP
description: Using HTTP services
prevpage:
  title: Routing
  url: /angular/tutorial/toh-pt5
---
//- FilePath: src/angular/tutorial/toh-pt6.jade
extends /_jade/ts/_cache/tutorial/toh-pt6.jade

block includes
  - var _example = 'toh-6';
  include ../_util-fns
  - var _Http = 'BrowserClient';
  - var _Angular_Http = 'Dart <code>BrowserClient</code>'
  - var _httpUrl = 'https://pub.dartlang.org/packages/http'
  - var _Angular_http_library = 'Dart <a href="' + _httpUrl + '"><b>http</b></a> package'
  - var _HttpModule = 'BrowserClient'
  - var _JSON_stringify = 'JSON.encode'

block start-server-and-watch
  :marked
    ## Keep the app compiling and running

    Open a terminal/console window.
    Start the Dart compiler, watch for changes, and start the server by entering the command:

  code-example(language="sh" class="code-shell").
      pub serve

block http-library
  :marked
    You'll be using the !{_Angular_http_library}'s
    `BrowserClient` class to communicate with a server.

    ### Pubspec updates

    Update package dependencies by adding the
    `stream_transformers` and !{_Angular_http_library}s.

    You also need to add a `resolved_identifiers` entry, to inform the [angular2
    transformer][ng2x] that the app will be using `BrowserClient`. (For an explanation of why
    this extra configuration is needed, see the [HTTP client page][guide-http].) You'll
    also need to use `Client` from http, so let's add that now as well.

    Update `pubspec.yaml` to look like this (additions are highlighted):

    [guide-http]: ../guide/server-communication.html#http-providers
    [ng2x]: https://github.com/angular/angular/wiki/Angular-2-Dart-Transformer

  - var stylePattern = { pnk: /(http.*|stream.*|resolved_identifiers:|Browser.*|Client.*)/gm };
  +makeExcerpt('pubspec.yaml', 'additions', null, stylePattern)

block http-providers
  :marked
    Before the app can use `#{_Http}`, you have to register it as a service provider.

    You should be able to access `!{_Http}` services from anywhere in the application.
    So register it in the `bootstrap` call where you
    launch the application and its root `AppComponent`.

  +makeExcerpt('app/main.ts','v1')

  :marked
    Notice that you supply `!{_HttpModule}` in a list, as the second parameter to
    the `bootstrap` method.  This has the same effect as the `providers` list in
    `@Component` annotation.

block backend
  :marked
    You want to replace `BrowserClient`, the service that talks to the remote server,
    with the in-memory web API service.
    The in-memory web API service, shown below, is implemented using the
    `http` library `MockClient` class.
    All `http` client implementations share a common `Client` interface, so
    you'll have the app use the `Client` type so that you can freely switch between
    implementations.

block dont-be-distracted-by-backend-subst
  //- No backend substitution but we do need to comment on the changes to Hero.
  :marked
    As is common for web API services, the mock in-memory service will be
    encoding and decoding heroes in JSON format, so enhance the `Hero`
    class with these capabilities:

  +makeExample('lib/hero.dart')

block get-heroes-details
  :marked
    To get the list of heroes, you first make an asynchronous call to
    `http.get()`. Then you use the `_extractData` helper method to decode the
    response body.

block observables-section-intro
  :marked
    Recall that `HeroService.getHeroes()` awaits for an `http.get()`
    response and yields a _Future_ `List<Hero>`, which is fine when you are only
    interested in a single result.

block search-criteria-intro
  :marked
    A [StreamController][], as its name implies, is a controller for a [Stream][] that allows you to
    manipulate the underlying stream by adding data to it, for example.

    In the sample, the underlying stream of strings (`_searchTerms.stream`) represents the hero
    name search patterns entered by the user. Each call to `search()` puts a new string into
    the stream by calling `add()` over the controller.

    [Stream]: https://api.dartlang.org/stable/dart-async/Stream-class.html
    [StreamController]: https://api.dartlang.org/stable/dart-async/StreamController-class.html

block observable-transformers
  :marked
    Instead, you can chain `!{_Observable}` operators that reduce the request flow to the string `!{_Observable}`.
    You'll make fewer calls to the `HeroSearchService` and still get timely results. Here's how:

    * `transform(new Debounce(... 300)))` waits until the flow of search terms pauses for 300
      milliseconds before passing along the latest string.
      You'll never make requests more frequently than 300ms.
    * `distinct()` ensures that a request is sent only if the filter text changed.
    * `transform(new FlatMapLatest(...))` calls the search service for each 
      search term that makes it through `Debounce()` and `distinct()`.
      It cancels and discards previous searches, returning only the 
      latest search service stream element.
    * `handleError()` handles errors. The simple example prints the error
      to the console; a real life application should do better.

block filetree
  .filetree
    .file angular_tour_of_heroes
    .children
      .file lib
      .children
        .file app_component.css
        .file app_component.dart
        .file dashboard_component.css
        .file dashboard_component.dart
        .file dashboard_component.html
        .file hero.dart
        .file hero_detail_component.css
        .file hero_detail_component.dart
        .file hero_detail_component.html
        .file hero_search_component.css (new)
        .file hero_search_component.dart (new)
        .file hero_search_component.html (new)
        .file hero_search_service.dart (new)
        .file hero_service.dart
        .file heroes_component.css
        .file heroes_component.dart
        .file heroes_component.html
        .file in_memory_data_service.dart (new)
      .file web
      .children
        .file main.dart
        .file index.html
        .file styles.css
      .file pubspec.yaml

block file-summary
  +makeTabs(
    `toh-6/dart/lib/dashboard_component.dart,
     toh-6/dart/lib/dashboard_component.html,
     toh-6/dart/lib/hero.dart,
     toh-6/dart/lib/hero_detail_component.dart,
     toh-6/dart/lib/hero_detail_component.html,
     toh-6/dart/lib/hero_service.dart,
     toh-6/dart/lib/heroes_component.css,
     toh-6/dart/lib/heroes_component.dart,
     toh-6/dart/lib/in_memory_data_service.dart`,
    ',,,,,,,,',
    `lib/dashboard_component.dart,
     lib/dashboard_component.html,
     lib/hero.dart,
     lib/hero_detail_component.dart,
     lib/hero_detail_component.html,
     lib/hero_service.dart,
     lib/heroes_component.css,
     lib/heroes_component.dart,
     lib/in_memory_data_service.dart`)

  +makeTabs(
    `toh-6/dart/lib/hero_search_component.css,
     toh-6/dart/lib/hero_search_component.dart,
     toh-6/dart/lib/hero_search_component.html,
     toh-6/dart/lib/hero_search_service.dart`,
    null,
    `lib/hero_search_component.css,
     lib/hero_search_component.dart,
     lib/hero_search_component.html,
     lib/hero_search_service.dart`)

  +makeTabs(
    `toh-6/dart/pubspec.yaml,
     toh-6/dart/web/main.dart`,
    null,
    `pubspec.yaml,
     web/main.dart`)

-// TODO: Add Recap and What's next sections