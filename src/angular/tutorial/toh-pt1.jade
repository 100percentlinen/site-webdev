---
layout: angular
title: The Hero Editor
description: We build a simple hero editor
prevpage:
  title: "The Starter App"
  url: /angular/tutorial/toh-pt0
nextpage:
  title: Master/Detail
  url: /angular/tutorial/toh-pt2
---
//- FilePath: src/angular/tutorial/toh-pt1.jade
include ../_util-fns

:marked
  In this part of the tutorial, you'll modify the starter app to display
  information about a hero. Then you'll add the ability to edit the hero's data.
  When you're done, the app should look like this <live-example></live-example>.

  ## Where you left off

  Before you start writing code, let's verify that you have the following structure.
  If not, you'll need to go back and follow the [setup](toh-pt0) instructions 
  on the previous page.

.filetree
  .file angular_tour_of_heroes
  .children
    .file lib
    .children
      .file app_component.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css
    .file pubspec.yaml

a#keep-transpiling
a#keep-running
include keep-app-running

.l-main-section
:marked
  ## Show the hero

  Add two properties to the `AppComponent`: a `title` property for the app name and a `hero` property
  for a hero named "Windstorm."

+makeExcerpt('app/app.component.1.ts (AppComponent class)', 'app-component-1')

:marked
  Now update the template in the `@Component` annotation with data bindings to these new properties.

+makeExcerpt('app/app.component.1.ts (@Component)', 'show-hero')

:marked
  Refresh the browser, and the page displays the title and hero name.

  The double curly braces are Angular's *interpolation binding* syntax.
  These interpolation bindings present the component's `title` and `hero` property values,
  as strings, inside the HTML header tags.

.l-sub-section
  :marked
    Read more about interpolation in the [Displaying Data](../guide/displaying-data.html) page.

:marked
  ### Hero object

  The hero needs more properties.
  Convert the `hero` from a literal string to a class.

  Create a `Hero` class with `id` and `name` properties.
  Add these properties near the top of the `app_component.dart` file, just below the import statement.

+makeExcerpt('app/app.component.ts (Hero class)', 'hero-class-1')

:marked
  In the `Hero` class, refactor the component's `hero` property to be of type `Hero`,
  then initialize it with an `id` of `1` and the name `Windstorm`.

+makeExcerpt('app/app.component.ts (hero property)', 'hero-property-1')

:marked
  Because you changed the hero from a string to an object,
  update the binding in the template to refer to the hero's `name` property.

+makeExcerpt('app/app.component.1.ts', 'show-hero-2', '')

:marked
  Refresh the browser, and the page continues to display the hero's name.

  ### Adding HTML with multi-line template strings

  To show all of the hero's properties,
  add a `<div>` for the hero's `id` property and another `<div>` for the hero's `name`.
  To keep the template readable, place each `<div>` on its own line.

//- Omit comment about backticks.
+makeExcerpt('app/app.component.1.ts', 'multi-line-strings')

.l-main-section
:marked
  ## Edit the hero name

  Users should be able to edit the hero name in an `<input>` textbox.
  The textbox should both _display_ the hero's `name` property
  and _update_ that property as the user types.

  You need a two-way binding between the `<input>` form element and the `hero.name` property.

  ### Two-way binding

  Refactor the hero name in the template so it looks like this:

+makeExcerpt('app/app.component.1.ts', 'name-input', '')

:marked
  `[(ngModel)]` is the Angular syntax to bind the `hero.name` property
  to the textbox.
  Data flows _in both directions:_ from the property to the textbox,
  and from the textbox back to the property.

.l-sub-section
  :marked
    Read more about `ngModel` in the
    [Forms](../guide/forms.html#ngModel) and
    [Template Syntax](../guide/template-syntax.html#ngModel) pages.

:marked
  Refresh the browser. You can edit the hero's name and see the changes
  reflected immediately in the `<h2>` above the textbox.

.l-main-section
:marked
  ## The road you've travelled

  Take stock of what you've built.

  * The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)
  to display the app title and properties of a `Hero` object.
  * You wrote a multi-line template using Dart's template strings to make the template readable.
  * You added a two-way data binding to the `<input>` element
  using the built-in `ngModel` directive. This binding both displays the hero's name and allows users to change it.
  * The `ngModel` directive propagates changes to every other binding of the `hero.name`.

  Your app should look like this <live-example></live-example>.

  Here's the complete `app_component.dart` as it stands now:

+makeExample('app/app.component.ts')


.l-main-section
:marked
  ## The road ahead

  In the [next tutorial page](./toh-pt2.html), you'll build on the Tour of Heroes app to display a list of heroes.
  You'll also allow the user to select heroes and display their details.
  You'll learn more about how to retrieve lists and bind them to the template.
