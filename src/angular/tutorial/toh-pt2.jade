---
layout: angular
title: Master/Detail
description: We build a master/detail page with a list of heroes
prevpage:
  title: The Hero Editor
  url: /angular/tutorial/toh-pt1
nextpage:
  title: Multiple Components
  url: /angular/tutorial/toh-pt3
---
//- FilePath: src/angular/tutorial/toh-pt2.jade
include ../_util-fns

:marked
  In this page, you'll expand the Tour of Heroes app to display a list of heroes, and
  allow users to select a hero and display the hero's details.

  When you're done with this page, the app should look like this <live-example></live-example>.

.l-main-section
:marked
  ## Where you left off

  Before you continue with this page of the Tour of Heroes,
  verify that you have the following structure after [The Hero Editor](./toh-pt1.html) page.
  If your structure doesn't match, go back to that page to figure out what you missed.

.filetree
  .file angular_tour_of_heroes
  .children
    .file lib
    .children
      .file app_component.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css
    .file pubspec.yaml

include keep-app-running

.l-main-section
:marked
  ## Displaying heroes

  To display a list of heroes, you'll add heroes to the view's template.

  ### Create heroes

  Create a list of ten heroes.

+makeExcerpt('lib/app_component.dart (hero list)', 'hero-array')

:marked
  The `mockHeroes` list is of type `Hero`, the class defined in the previous page.
  Eventually this app will fetch the list of heroes from a web service, but for now
  you can display mock heroes.

  ### Expose heroes

  Create a public property in `AppComponent` that exposes the heroes for binding.


+makeExcerpt('app/app.component.1.html (hero list property)', 'hero-array-1')

.l-sub-section
  :marked
    The hero data is separated from the class implementation
    because ultimately the hero names will come from a data service.

:marked
  ### Display hero names in a template

  To display the hero names in an unordered list,
  insert the following chunk of HTML below the title and above the hero details.


+makeExcerpt('app/app.component.1.html (heroes template)', 'heroes-template-1')

:marked
  Now you can fill the template with hero names.

  ### List heroes with ngFor

  The goal is to bind the list of heroes in the component to the template, iterate over them,
  and display them individually.

  Modify the `<li>` tag by adding the built-in directive `*ngFor`.

+makeExcerpt('app/app.component.1.html (ngFor)', 'heroes-ngfor-1')


.l-sub-section
  :marked
    The (`*`) prefix to `ngFor` is a critical part of this syntax.
    It indicates that the `<li>` element and its children
    constitute a master template.

    The `ngFor` directive iterates over the component's `heroes` list
    and renders an instance of this template for each hero in that list.

    The `let hero` part of the expression identifies `hero` as the  template input variable,
    which holds the current hero item for each iteration.
    You can reference this variable within the template to access the current hero's properties.

    Read more about `ngFor` and template input variables in the
    [Showing a list property with *ngFor](../guide/displaying-data.html#ngFor) section of the
    [Displaying Data](../guide/displaying-data.html) page and the
    [ngFor](../guide/template-syntax.html#ngFor) section of the
    [Template Syntax](../guide/template-syntax.html) page.

:marked
  Within the `<li>` tags, add content
  that uses the `hero` template variable to display the hero's properties.


+makeExcerpt('app/app.component.1.html (ngFor template)', 'ng-for')

:marked
  Refresh the browser, and a list of heroes appears.

  ### Style the heroes

  Users should get a visual cue of which hero they are hovering over and which hero is selected.

  To add styles to your component, set the `styles` argument of the `@Component` annotation
  to the following CSS classes:

+makeExcerpt('app/app.component.ts (styles)', 'styles')

:marked
  Adding these styles makes the file much longer. In a later page you'll move the styles to a separate file.

  When you assign styles to a component, they are scoped to that specific component.
  These styles apply only to the `AppComponent` and don't affect the outer HTML.

  The template for displaying heroes should look like this:


+makeExcerpt('app/app.component.1.html (styled heroes)', 'heroes-styled')

.l-main-section
  :marked
    ## Selecting a hero

    The app now displays a list of heroes as well as a single hero in the details view. But
    the list and the details view are not connected.
    When users select a hero from the list, the selected hero should appear in the details view.
    This UI pattern is known as "master/detail."
    In this case, the _master_ is the heroes list and the _detail_ is the selected hero.

    Next you'll connect the master to the detail through a `selectedHero` component property,
    which is bound to a click event.

    ### Handle click events

    Add a click event binding to the `<li>` like this:


  +makeExcerpt('app/app.component.1.html (template excerpt)', 'selectedHero-click')

  :marked
    The parentheses identify the `<li>` element's  `click` event as the target.
    The `onSelect(hero)` expression calls the  `AppComponent` method, `onSelect()`,
    passing the template input variable `hero`, as an argument.
    That's the same `hero` variable you defined previously in the `ngFor` directive.

  .l-sub-section
    :marked
      Learn more about event binding at the
      [User Input](../guide/user-input.html) page and the
      [Event binding](../guide/template-syntax.html#event-binding) section of the
      [Template Syntax](../guide/template-syntax.html) page.

  :marked
    ### Add a click handler to expose the selected hero

    You no longer need the `hero` property because you're no longer displaying a single hero; you're displaying a list of heroes.
    But the user will be able to select one of the heroes by clicking on it.
    So replace the `hero` property with this simple `selectedHero` property:

  +makeExcerpt('app/app.component.ts (selectedHero)', 'selected-hero')

  :marked
    The hero names should all be unselected before the user picks a hero, so
    you won't initialize the `selectedHero` as you did with `hero`.

    Add an `onSelect()` method that sets the `selectedHero` property to the `hero` that the user clicks.

  +makeExcerpt('app/app.component.ts (onSelect)', 'on-select')

  :marked
    The template still refers to the old `hero` property.
    Bind to the new `selectedHero` property instead as follows:


  +makeExcerpt('app/app.component.1.html (template excerpt)', 'selectedHero-details')

  :marked
    ### Hide the empty detail with ngIf

    When the app loads, `selectedHero` is null.
    The selected hero is initialized when the user clicks a hero's name.
    Angular can't display properties of the null `selectedHero` and throws the following error,
    visible in the browser's console:

  code-example(format="nocode").
    EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]

  :marked
    Although `selectedHero.name` is displayed in the template,
    you must keep the hero detail out of the DOM until there is a selected hero.

    Wrap the HTML hero detail content of the template with a `<div>`.
    Then add the `ngIf` built-in directive and set it to `selectedHero != null`.

  +makeExcerpt('app/app.component.1.html (ngIf)', 'ng-if')

  .alert.is-critical
    :marked
      Don't forget the asterisk (`*`) in front of `ngIf`.

  :marked
    Refresh the browser. The app no longer fails and the list of names displays again in the browser.

  :marked
    When there is no selected hero, the `ngIf` directive removes the hero detail HTML from the DOM.
    There are no hero detail elements or bindings to worry about.

    When the user picks a hero, `selectedHero` becomes non-null and
    `ngIf` puts the hero detail content into the DOM and evaluates the nested bindings.

  .l-sub-section
    :marked
      Read more about `ngIf` and `ngFor` in the
      [Structural Directives](../guide/structural-directives.html) page and the
      [Built-in directives](../guide/template-syntax.html#directives) section of the
      [Template Syntax](../guide/template-syntax.html) page.


  :marked
    ### Style the selected hero

    While the selected hero details appear below the list, it's difficult to identify the selected hero within the list itself.

    In the `styles` metadata that you added above, there is a custom CSS class named `selected`.
    To make the selected hero more visible, you'll apply this `selected` class to the `<li>` when the user clicks on a hero name.
    For example, when the user clicks "Magneta", it should render with a distinctive but subtle background color
    like this:

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-selected.png' alt="Selected hero")

  :marked
    In the template, add the following `[class.selected]` binding to  the `<li>`:

  +makeExcerpt('app/app.component.1.html (setting the CSS class)', 'class-selected-1')

  :marked
    When the expression (`hero == selectedHero`) is `true`, Angular adds the `selected` CSS class.
    When the expression is `false`, Angular removes the `selected` class.


  .l-sub-section
    :marked
      Read more about the `[class]` binding in the [Template Syntax](../guide/template-syntax.html#ngClass "Template syntax: NgClass") guide.

  :marked
    The final version of the `<li>` looks like this:

  +makeExcerpt('app/app.component.1.html (styling each hero)', 'class-selected-2')

  :marked
    After clicking "Magneta", the list should look like this:

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-1.png' alt="Output of heroes list app")

  :marked
    Here's the complete `app_component.dart` as of now:

  +makeExample('app/app.component.ts')

.l-main-section
:marked
  ## The road you've travelled

  Here's what you achieved in this page:

  * The Tour of Heroes app displays a list of selectable heroes.
  * You added the ability to select a hero and show the hero's details.
  * You learned how to use the built-in directives `ngIf` and `ngFor` in a component's template.

  Your app should look like this <live-example></live-example>.

  ## The road ahead

  You've expanded the Tour of Heroes app, but it's far from complete.
  An app shouldn't be one monolithic component.
  In the [next page](toh-pt3.html), you'll split the app into subcomponents and make them work together.
