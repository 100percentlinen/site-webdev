---
layout: angular
title: The Starter App
description: We look at a simple Angular app
prevpage:
  title: "Tutorial: Tour of Heroes"
  url: /angular/tutorial
nextpage:
  title: The Hero Editor
  url: /angular/tutorial/toh-pt1
---
//- FilePath: src/angular/tutorial/toh-pt0.jade
include ../_util-fns

- var _example = 'toh-0';

:marked
  This tutorial starts with a bare-bones Angular app.
  Run the <live-example name="toh-0">live example</live-example>
  to see the app.

  ## Create the app

  Let's get started.

  Use WebStorm or the command line
  and the **Simple Angular Example** template
  to **create a project** named `angular_tour_of_heroes`.
  For detailed instructions, see [Setup for Development](/angular/guide/setup).

  Keep the app compiling and running,
  using either WebStorm or `pub serve`.
  Every time you change the app, reload the browser window
  to see the latest version.

  ## Angular app basics

  Angular applications are made up of _components_.
  A _component_ is the combination of an HTML template and a component class that controls a portion of the screen. The starter app has a component that displays a simple string:

+makeExample('lib/app_component.dart')

:marked
  Every component begins with an `@Component` [!{_decorator}](../glossary.html#!{_decorator} '"!{_decorator}" explained')
  <span if-docs="ts">function</span> that
  <span if-docs="ts">takes a _metadata_ object. The metadata object</span> describes how the HTML template and component class work together.

  The `selector` property tells Angular to display the component inside a custom `<my-app>` tag in the `index.html`.

+makeExcerpt('web/index.html (inside <body>)', 'my-app')

:marked
  The `template` property defines a message inside an `<h1>` header.
  The message starts with "Hello" and ends with `{% raw %}{{name}}{% endraw %}`,
  which is an Angular [interpolation binding](../guide/displaying-data.html) expression.
  At runtime, Angular replaces `{% raw %}{{name}}{% endraw %}` with
  the value of the component's `name` property.
  Interpolation binding is one of many Angular features you'll discover in this documentation.

a#seed
:marked
  ## The starter app's code

  The app contains the following core files:

+makeTabs(`
    toh-0/lib/app_component.dart,
    toh-0/web/main.dart,
    toh-0/web/index.html,
    toh-0/web/styles.css,
    toh-0/pubspec.yaml`,
  ',,,quickstart,initial',
  `lib/app_component.dart,
  web/main.dart,
  web/index.html,
  web/styles.css (excerpt),
  pubspec.yaml`)

:marked
  These files are organized as follows:

.filetree
  .file angular_tour_of_heroes
  .children
    .file lib
    .children
      .file app_component.dart
    .file web
    .children
      .file main.dart
      .file index.html
      .file styles.css
    .file pubspec.yaml

:marked
  All the examples in this documentation have _at least these core files_.
  Each file has a distinct purpose and evolves independently as the application grows.

style td, th {vertical-align: top}
table(width="100%")
  col(width="20%")
  col(width="80%")
  tr
    th File
    th Purpose
  tr
    td <code>lib/app_component.dart</code>
    td
      :marked
        Defines `<my-app>`, the **root** component of what will become a tree of nested components
        as the application evolves.
  tr
    td <code>web/main.dart</code>
    td
      :marked
        Bootstraps the application to run in the browser.
  tr
    td <code>web/index.html</code>
    td
      :marked
        Contains the `<my-app>` tag in its `<body>`.
        This is where the app lives!
  tr
    td <code>web/styles.css</code>
    td
      :marked
        A set of styles used throughout the app.
  tr
    td <code>pubspec.yaml</code>
    td
      :marked
        The file that describes this Dart package (the app) and its dependencies.
        For example, it specifies the **angular2** and **browser** packages as dependencies,
        as well as the **angular2** transformer.

        **Note:** The **dart_to_js_script_rewriter** transformer, if present,
        must be **after angular2** in the **transformers** list.
        If the order is wrong, Angular templates don't work.

.l-main-section#testing
:marked
  ## Angular app testing

  Testing is an essential part of software development.
  As an introduction to Angular app testing, in this section you'll write
  a few basic tests for `AppComponent` using the [angular_test][] package.

  [angular_test]: https://pub.dartlang.org/packages/angular_test

  Create a `test` folder and add the following test file:

+makeExcerpt('test/app_test.dart (initial)')

:marked
  If you've used modern testing frameworks, then you should recognize some
  elements such as the [test fixture][], setup, and teardown functions.

  [test fixture]: https://github.com/junit-team/junit4/wiki/test-fixtures

  The file contains a single test named "Default greeting" that checks whether
  the app component template generates the text "Hello Angular".

+makeExcerpt('test/app_test.dart', 'default-test', '')

:marked
  Before you can run the test, you'll need make some changes to the project's
  `pubspec.yaml`.
  
  First, add the [test][] and [angular_test][] packages to the list of `dev_dependencies`.

  [test]: https://pub.dartlang.org/packages/test
  [angular_test]: https://pub.dartlang.org/packages/angular_test

+makeExcerpt('pubspec.yaml (dev_dependencies)')

:marked
  Next, add the `reflection_remover` and `pub_serve` transformers immediately
  before `dart_to_js_script_rewriter`:

//- TODO: add highlights of the key region once highlighting works again:
    https://github.com/dart-lang/site-webdev/issues/374
+makeExcerpt('pubspec.yaml (transformers)')

//-.l-sub-section
  :marked
    The `angular_test` package currently only supports the testing of
    [ahead-of-time (AOT)][aot] compiled apps.

    [aot]: /angular/glossary#aot
  
:marked
  To run tests, open a terminal, and from the project root issue the following
  command:

code-example(language="sh" class="code-shell").
  pub run angular_test

:marked
  The test framework runs code transformers, launches [pub serve][], loads
  the test file, and runs tests:

  [pub serve]: /angular/guide/setup#running-the-app

code-example(format="nocode" class="code-shell").
  00:00 +0: loading test/main_test.dart
  00:01 +0: test/main_test.dart: Default greeting
  00:01 +1: test/main_test.dart: Default greeting
  00:01 +1: All tests passed!

:marked
  Add a few more tests:

+makeExcerpt('test/app_test.dart', 'more-tests', '')

:marked
  The first of these tests interacts with the app component fixture by setting
  the component's `name` property to "World", and expecting the infamous
  greeting as a result.

  The second test uses the fixture's `rootElement` to access the native DOM
  element generated from the component's template.

//-
  You'll learn more than these basic testing capabilities as you progress
  through the tutorial. For detailed coverage of Angular testing, see the
  [Testing][] page.

  [Testing]: /angular/guide/testing

.l-main-section
:marked
  ## What's next

  In the [next tutorial page](./toh-pt1),
  you'll modify the starter app to display more interesting data,
  and to allow the user to edit that data.
