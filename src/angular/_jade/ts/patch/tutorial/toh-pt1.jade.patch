diff --git a/./src/angular/_jade/ts/latest/tutorial/toh-pt1.jade b/./src/angular/tutorial/toh-pt1.jade
index 7c47a0b..4af2716 100644
--- a/./src/angular/_jade/ts/latest/tutorial/toh-pt1.jade
+++ b/./src/angular/tutorial/toh-pt1.jade
@@ -1,67 +1,63 @@
-//- include ../_util-fns
+---
+layout: angular
+title: The Hero Editor
+description: We build a simple hero editor
+prevpage:
+  title: "The Starter App"
+  url: /angular/tutorial/toh-pt0
+nextpage:
+  title: Master/Detail
+  url: /angular/tutorial/toh-pt2
+---
+//- FilePath: src/angular/tutorial/toh-pt1.jade
+include ../_util-fns
 
 :marked
-  ## Setup to develop locally
+  In this part of the tutorial, you'll modify the starter app to display
+  information about a hero. Then you'll add the ability to edit the hero's data.
+  When you're done, the app should look like this <live-example></live-example>.
 
-  Follow the [setup](../guide/setup.html) instructions for creating a new project
-  named <code>angular-tour-of-heroes</code>.
+  ## Where you left off
 
-  The file structure should look like this:
+  Before you start writing code, let's verify that you have the following structure.
+  If not, you'll need to go back and follow the [setup](toh-pt0) instructions 
+  on the previous page.
 
 .filetree
-  .file angular-tour-of-heroes
+  .file angular_tour_of_heroes
   .children
-    .file src
+    .file lib
+    .children
+      .file app_component.dart
+    .file web
     .children
-      .file app
-      .children
-        .file app.component.ts
-        .file app.module.ts
-      .file main.ts
       .file index.html
+      .file main.dart
       .file styles.css
-      .file systemjs.config.js
-      .file tsconfig.json
-    .file node_modules ...
-    .file package.json
-:marked
-  When you're done with this page, the app should look like this <live-example></live-example>.
-
-a#keep-transpiling
-:marked
-  ## Keep the app transpiling and running
+    .file pubspec.yaml
 
-  Enter the following command in the terminal window:
-
-code-example(language="sh" class="code-shell").
-  npm start
-
-:marked
-  This command runs the TypeScript compiler in "watch mode", recompiling automatically when the code changes.
-  The command simultaneously launches the app in a browser and refreshes the browser when the code changes.
-
-  You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.
+include keep-app-running
 
 .l-main-section
-  :marked
-    ## Show the hero
+:marked
+  ## Show the hero
 
-    Add two properties to the `AppComponent`: a `title` property for the app name and a `hero` property
-    for a hero named "Windstorm."
+  Add two properties to the `AppComponent`: a `title` property for the app name and a `hero` property
+  for a hero named "Windstorm."
 
-  +makeExcerpt('app/app.component.1.ts (AppComponent class)', 'app-component-1')
++makeExcerpt('app/app.component.1.ts (AppComponent class)', 'app-component-1')
 
-  :marked
-    Now update the template in the `@Component` decorator with data bindings to these new properties.
+:marked
+  Now update the template in the `@Component` annotation with data bindings to these new properties.
 
-  +makeExcerpt('app/app.component.1.ts (@Component)', 'show-hero')
++makeExcerpt('app/app.component.1.ts (@Component)', 'show-hero')
 
-  :marked
-    The browser refreshes and displays the title and hero name.
+:marked
+  Refresh the browser, and the page displays the title and hero name.
 
-    The double curly braces are Angular's *interpolation binding* syntax.
-    These interpolation bindings present the component's `title` and `hero` property values,
-    as strings, inside the HTML header tags.
+  The double curly braces are Angular's *interpolation binding* syntax.
+  These interpolation bindings present the component's `title` and `hero` property values,
+  as strings, inside the HTML header tags.
 
 .l-sub-section
   :marked
@@ -91,7 +87,7 @@ code-example(language="sh" class="code-shell").
 +makeExcerpt('app/app.component.1.ts', 'show-hero-2', '')
 
 :marked
-  The browser refreshes and continues to display the hero's name.
+  Refresh the browser, and the page continues to display the hero's name.
 
   ### Adding HTML with multi-line template strings
 
@@ -99,12 +95,8 @@ code-example(language="sh" class="code-shell").
   add a `<div>` for the hero's `id` property and another `<div>` for the hero's `name`.
   To keep the template readable, place each `<div>` on its own line.
 
-  The backticks around the component template let you put the `<h1>`, `<h2>`, and `<div>` elements on their own lines,
-  thanks to the <i>template literals</i> feature in ES2015 and TypeScript. For more information, see
-  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener" title="template literal">Template literals</a>.
-
-
-+makeExample('toh-1/ts/app/app.component.1.ts', 'multi-line-strings', 'app.component.ts (AppComponent\'s template)')(format='.')
+//- Omit comment about backticks.
++makeExcerpt('app/app.component.1.ts', 'multi-line-strings')
 
 .l-main-section
 :marked
@@ -128,34 +120,40 @@ code-example(language="sh" class="code-shell").
   Data flows _in both directions:_ from the property to the textbox,
   and from the textbox back to the property.
 
-  Unfortunately, immediately after this change, the application breaks.
-  If you looked in the browser console, you'd see Angular complaining that
-  "`ngModel` ... isn't a known property of `input`."
-
-  Although `NgModel` is a valid Angular directive, it isn't available by default.
-  It belongs to the optional `FormsModule`.
-  You must opt-in to using that module.
-
-  ### Import the _FormsModule_
+.l-sub-section
+  :marked
+    Read more about `ngModel` in the
+    [Forms](../guide/forms.html#ngModel) and
+    [Template Syntax](../guide/template-syntax.html#ngModel) pages.
 
-  Open the `app_module.dart` file and import the `FormsModule` symbol from the `@angular/forms` library.
-  Then add the `FormsModule` to the `@NgModule` metadata's `imports` array, which contains the list
-  of external modules that the app uses.
+:marked
+  ### @Component(directives: ...)
+
+  Unfortunately, immediately after this change, the **application breaks**!
+  If you open the browser console and refresh the page, you'll see Angular
+  complaining.  To know why, look at the `pub serve` output. The template
+  comipler doesn't recognize `ngModel`, and issues a parse error for
+  `AppComponent` because it
+  
+  ```
+    Can't bind to 'ngModel' since it isn't a known native property or known directive. Please fix typo or add to directives list.
+    [(ngModel)]="hero.name"
+    ^^^^^^^^^^^^^^^^^^^^^^^
+  ```
 
-  The updated `AppModule` looks like this:
+  Although `NgModel` is a valid Angular directive, it isn't available by default.
 
-+makeExample('toh-1/ts/app/app.module.ts', '', 'app.module.ts (FormsModule import)')
+  Before you can use Angular directives (like `ngModel`) in a template,
+  you need to list them in the `directives` argument of your component's
+  `@Component` annotation. Although you can list directives individually,
+  it is more convenient to include all common directives in one go using
+  the [COMMON_DIRECTIVES](/angular/api/angular2.common/COMMON_DIRECTIVES-constant)
+  list:
 
-.l-sub-section
-  :marked
-    Read more about `FormsModule` and `ngModel` in the
-    [Two-way data binding with ngModel](../guide/forms.html#ngModel) section of the
-    [Forms](../guide/forms.html) guide and the
-    [Two-way binding with NgModel](../guide/template-syntax.html#ngModel) section of the
-    [Template Syntax](../guide/template-syntax.html) guide.
++makeExcerpt('lib/app_component.dart (directives)')
 
 :marked
-  When the browser refreshes, the app should work again.
+  Refresh the browser and the app should work again.
   You can edit the hero's name and see the changes reflected immediately in the `<h2>` above the textbox.
 
 .l-main-section
@@ -165,11 +163,13 @@ code-example(language="sh" class="code-shell").
   Take stock of what you've built.
 
   * The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)
-  to display the app title and properties of a `Hero` object.
-  * You wrote a multi-line template using ES2015's template literals to make the template readable.
+    to display the app title and properties of a `Hero` object.
+  * You wrote a multi-line template using Dart's template strings to make the template readable.
   * You added a two-way data binding to the `<input>` element
-  using the built-in `ngModel` directive. This binding both displays the hero's name and allows users to change it.
-  * The `ngModel` directive propagates changes to every other binding of the `hero.name`.
+    using the built-in `ngModel` directive. This binding both displays the hero's name and allows users to change it.
+  * You added [COMMON_DIRECTIVES](/angular/api/angular2.common/COMMON_DIRECTIVES-constant)
+    to the `directives` argument of the app's `@Component` annotation so that Angular knows
+    where `ngModel` is defined.
 
   Your app should look like this <live-example></live-example>.
 
