diff --git a/./src/angular/_jade/ts/latest/tutorial/toh-pt2.jade b/./src/angular/tutorial/toh-pt2.jade
index 53131bc..946e769 100644
--- a/./src/angular/_jade/ts/latest/tutorial/toh-pt2.jade
+++ b/./src/angular/tutorial/toh-pt2.jade
@@ -1,4 +1,16 @@
-//- include ../_util-fns
+---
+layout: angular
+title: Master/Detail
+description: We build a master/detail page with a list of heroes
+prevpage:
+  title: The Hero Editor
+  url: /angular/tutorial/toh-pt1
+nextpage:
+  title: Multiple Components
+  url: /angular/tutorial/toh-pt3
+---
+//- FilePath: src/angular/tutorial/toh-pt2.jade
+include ../_util-fns
 
 :marked
   In this page, you'll expand the Tour of Heroes app to display a list of heroes, and
@@ -15,34 +27,19 @@
   If your structure doesn't match, go back to that page to figure out what you missed.
 
 .filetree
-  .file angular-tour-of-heroes
+  .file angular_tour_of_heroes
   .children
-    .file src
+    .file lib
+    .children
+      .file app_component.dart
+    .file web
     .children
-      .file app
-      .children
-        .file app.component.ts
-        .file app.module.ts
-      .file main.ts
       .file index.html
+      .file main.dart
       .file styles.css
-      .file systemjs.config.js
-      .file tsconfig.json
-    .file node_modules ...
-    .file package.json
-:marked
-  ## Keep the app transpiling and running
-
-  Enter the following command in the terminal window:
+    .file pubspec.yaml
 
-code-example(language="sh" class="code-shell").
-  npm start
-
-:marked
-  This command runs the TypeScript compiler in "watch mode", recompiling automatically when the code changes.
-  The command simultaneously launches the app in a browser and refreshes the browser when the code changes.
-
-  You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.
+include keep-app-running
 
 .l-main-section
 :marked
@@ -52,12 +49,12 @@ code-example(language="sh" class="code-shell").
 
   ### Create heroes
 
-  Create an array of ten heroes.
+  Create a list of ten heroes.
 
-+makeExcerpt('app/app.component.ts (hero array)', 'hero-array')
++makeExcerpt('lib/app_component.dart (hero list)', 'hero-array')
 
 :marked
-  The `HEROES` array is of type `Hero`, the class defined in the previous page.
+  The `mockHeroes` list is of type `Hero`, the class defined in the previous page.
   Eventually this app will fetch the list of heroes from a web service, but for now
   you can display mock heroes.
 
@@ -66,10 +63,7 @@ code-example(language="sh" class="code-shell").
   Create a public property in `AppComponent` that exposes the heroes for binding.
 
 
-+makeExcerpt('app/app.component.1.html (hero array property)', 'hero-array-1')
-
-:marked
-  The `heroes` type isn't defined because TypeScript infers it from the `HEROES` array.
++makeExcerpt('app/app.component.1.html (hero list property)', 'hero-array-1')
 
 .l-sub-section
   :marked
@@ -90,7 +84,7 @@ code-example(language="sh" class="code-shell").
 
   ### List heroes with ngFor
 
-  The goal is to bind the array of heroes in the component to the template, iterate over them,
+  The goal is to bind the list of heroes in the component to the template, iterate over them,
   and display them individually.
 
   Modify the `<li>` tag by adding the built-in directive `*ngFor`.
@@ -104,15 +98,15 @@ code-example(language="sh" class="code-shell").
     It indicates that the `<li>` element and its children
     constitute a master template.
 
-    The `ngFor` directive iterates over the component's `heroes` array
-    and renders an instance of this template for each hero in that array.
+    The `ngFor` directive iterates over the component's `heroes` list
+    and renders an instance of this template for each hero in that list.
 
     The `let hero` part of the expression identifies `hero` as the  template input variable,
     which holds the current hero item for each iteration.
     You can reference this variable within the template to access the current hero's properties.
 
     Read more about `ngFor` and template input variables in the
-    [Showing an array property with *ngFor](../guide/displaying-data.html#ngFor) section of the
+    [Showing a list property with *ngFor](../guide/displaying-data.html#ngFor) section of the
     [Displaying Data](../guide/displaying-data.html) page and the
     [ngFor](../guide/template-syntax.html#ngFor) section of the
     [Template Syntax](../guide/template-syntax.html) page.
@@ -125,20 +119,18 @@ code-example(language="sh" class="code-shell").
 +makeExcerpt('app/app.component.1.html (ngFor template)', 'ng-for')
 
 :marked
-  When the browser refreshes, a list of heroes appears.
+  Refresh the browser, and a list of heroes appears.
 
   ### Style the heroes
 
   Users should get a visual cue of which hero they are hovering over and which hero is selected.
 
-  To add styles to your component, set the `styles` property on the `@Component` decorator
+  To add styles to your component, set the `styles` argument of the `@Component` annotation
   to the following CSS classes:
 
 +makeExcerpt('app/app.component.ts (styles)', 'styles')
 
 :marked
-  Remember to use the backtick notation for multi-line strings.
-
   Adding these styles makes the file much longer. In a later page you'll move the styles to a separate file.
 
   When you assign styles to a component, they are scoped to that specific component.
@@ -209,9 +201,9 @@ code-example(language="sh" class="code-shell").
   :marked
     ### Hide the empty detail with ngIf
 
-    When the app loads, `selectedHero` is undefined.
+    When the app loads, `selectedHero` is null.
     The selected hero is initialized when the user clicks a hero's name.
-    Angular can't display properties of the undefined `selectedHero` and throws the following error,
+    Angular can't display properties of the null `selectedHero` and throws the following error,
     visible in the browser's console:
 
   code-example(format="nocode").
@@ -222,7 +214,7 @@ code-example(language="sh" class="code-shell").
     you must keep the hero detail out of the DOM until there is a selected hero.
 
     Wrap the HTML hero detail content of the template with a `<div>`.
-    Then add the `ngIf` built-in directive and set it to the `selectedHero` property of the component.
+    Then add the `ngIf` built-in directive and set it to `selectedHero != null`.
 
   +makeExcerpt('app/app.component.1.html (ngIf)', 'ng-if')
 
@@ -231,13 +223,13 @@ code-example(language="sh" class="code-shell").
       Don't forget the asterisk (`*`) in front of `ngIf`.
 
   :marked
-    The app no longer fails and the list of names displays again in the browser.
+    Refresh the browser. The app no longer fails and the list of names displays again in the browser.
 
   :marked
     When there is no selected hero, the `ngIf` directive removes the hero detail HTML from the DOM.
     There are no hero detail elements or bindings to worry about.
 
-    When the user picks a hero, `selectedHero` becomes defined and
+    When the user picks a hero, `selectedHero` becomes non-null and
     `ngIf` puts the hero detail content into the DOM and evaluates the nested bindings.
 
   .l-sub-section
@@ -267,7 +259,7 @@ code-example(language="sh" class="code-shell").
   +makeExcerpt('app/app.component.1.html (setting the CSS class)', 'class-selected-1')
 
   :marked
-    When the expression (`hero === selectedHero`) is `true`, Angular adds the `selected` CSS class.
+    When the expression (`hero == selectedHero`) is `true`, Angular adds the `selected` CSS class.
     When the expression is `false`, Angular removes the `selected` class.
 
 
