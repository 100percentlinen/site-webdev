diff --git a/./src/angular/_jade/ts/latest/tutorial/toh-pt3.jade b/./src/angular/tutorial/toh-pt3.jade
index 2086c30..0eff1fe 100644
--- a/./src/angular/_jade/ts/latest/tutorial/toh-pt3.jade
+++ b/./src/angular/tutorial/toh-pt3.jade
@@ -1,4 +1,16 @@
-//- include ../_util-fns
+---
+layout: angular
+title: Multiple Components
+description: We refactor the master/detail view into separate components
+prevpage:
+  title: Master/Detail
+  url: /angular/tutorial/toh-pt2
+nextpage:
+  title: Services
+  url: /angular/tutorial/toh-pt4
+---
+//- FilePath: src/angular/tutorial/toh-pt3.jade
+include ../_util-fns
 
 :marked
   The `AppComponent` is doing _everything_ at the moment.
@@ -21,70 +33,68 @@
   If not, go back to the previous pages.
 
 .filetree
-  .file angular-tour-of-heroes
+  .file angular_tour_of_heroes
   .children
-    .file src
+    .file lib
+    .children
+      .file app_component.dart
+    .file web
     .children
-      .file app
-      .children
-        .file app.component.ts
-        .file app.module.ts
-      .file main.ts
       .file index.html
+      .file main.dart
       .file styles.css
-      .file systemjs.config.js
-      .file tsconfig.json
-    .file node_modules ...
-    .file package.json
+    .file pubspec.yaml
+
 :marked
-  Keep the app transpiling and running while you build the Tour of Heroes
-  by entering the `npm start` command in a terminal window
-  [as you did before](toh-pt1.html#keep-transpiling "Keep the app running").
+  Keep the app compiling and running while you build the Tour of Heroes
+  by entering the `pub serve` command in a terminal window
+  [as you did before](toh-pt1.html#keep-app-running "Keep the app running").
 
   ## Make a hero detail component
 
   Add a file named `hero_detail_component.dart` to the `lib/` folder.
   This file will hold the new `HeroDetailComponent`.
 
-  The file and component names follow the standard described in the Angular
-  [style guide](../guide/style-guide.html#naming).
+.l-sub-section
+  :marked
+    **Angular naming conventions**:
 
-  * The component _class_ name should be written in _upper camel case_ and end in the word "Component".
-  The hero detail component class is `HeroDetailComponent`.
+    * The component _class_ name should be written in _upper camel case_ and
+      end in the word "Component".  The hero detail component class is
+      `HeroDetailComponent`.
 
-  * The component _file_ name should be spelled in [_lower dash case_](../guide/glossary.html#dash-case),
-  each word separated by dashes, and end in `_component.dart`.
-  The `HeroDetailComponent` class goes in the `hero_detail_component.dart` file.
+    * The component _file_ name should be spelled in [_lower underscore
+      case_](/angular/glossary#snake_case), each word separated by
+      underscores, and end in `_component.dart`.  The `HeroDetailComponent`
+      class goes in the `hero_detail_component.dart` file.
 
+:marked
   Start writing the `HeroDetailComponent` as follows:
 
-+makeExcerpt('app/hero-detail.component.1.ts (initial version)', 'v1')
++makeExcerpt('app/hero-detail.component.ts (initial version)', 'v1')
 
 a#selector
 :marked
-  To define a component, you always import the `Component` symbol.
+  To define a component, you always import the main Angular library.
 
-  The `@Component` decorator provides the Angular metadata for the component.
+  The `@Component` annotation provides the Angular metadata for the component.
   The CSS selector name, `hero-detail`, will match the element tag
   that identifies this component within a parent component's template.
   [Near the end of this tutorial page](#add-hero-detail "Add the HeroDetailComponent to the AppComponent"),
   you'll add a `<hero-detail>` element to the `AppComponent` template.
 
-  Always `export` the component class because you'll always `import` it elsewhere.
-
 :marked
   ### Hero detail template
 
   To move the hero detail view to the `HeroDetailComponent`,
   cut the hero detail _content_ from the bottom of the `AppComponent` template
-  and paste it into a new `template` property in the `@Component` metadata.
+  and paste it into a new `template` argument of the `@Component` annotation.
 
   The `HeroDetailComponent` has a _hero_, not a _selected hero_.
   Replace the word, "selectedHero", with the word, "hero", everywhere in the template.
   When you're done, the new template should look like this:
 
-+makeExcerpt('app/hero-detail.component.ts (template)', 'template')
-
++makeExcerpt('lib/hero_detail_component.dart (template)')
 
 :marked
   ### Add the *hero* property
@@ -92,23 +102,22 @@ a#selector
   The `HeroDetailComponent` template binds to the component's `hero` property.
   Add that property to the `HeroDetailComponent` class like this:
 
-+makeExcerpt('app/hero-detail.component.1.ts (hero property)', 'hero')
++makeExcerpt('lib/hero_detail_component.dart (hero)')
 
 :marked
   The `hero` property is typed as an instance of `Hero`.
   The `Hero` class is still in the `app_component.dart` file.
   Now there are two components that need to reference the `Hero` class.
-  The Angular [style guide](../guide/style-guide.html#rule-of-one "Style guide: rule of one") recommends one class per file anyway.
 
   Move the `Hero` class from `app_component.dart` to its own `hero.dart` file.
 
-+makeExcerpt('app/hero.ts')
++makeExample('lib/hero.dart')
 
 :marked
   Now that the `Hero` class is in its own file, the `AppComponent` and the `HeroDetailComponent` have to import it.
   Add the following `import` statement near the top of _both_ the `app_component.dart` and the `hero_detail_component.dart` files.
 
-+makeExcerpt('app/hero-detail.component.1.ts', 'hero-import', '')
++makeExcerpt('lib/hero_detail_component.dart (import)', 'hero-import')
 
 :marked
   ### The *hero* property is an *input* property
@@ -118,7 +127,8 @@ a#selector
   by binding its `selectedHero` to the `hero` property of the `HeroDetailComponent`.
   The binding will look like this:
 
-+makeExcerpt('app/app.component.1.html', 'hero-detail-binding', '')
+code-example(language="html").
+  &lt;hero-detail [hero]="selectedHero">&lt;/hero-detail>
 
 :marked
   Putting square brackets around the `hero` property, to the left of the equal sign (=),
@@ -126,15 +136,9 @@ a#selector
   You must declare a *target* binding property to be an *input* property.
   Otherwise, Angular rejects the binding and throws an error.
 
-  First, amend the `@angular/core` import statement to include the `Input` symbol.
-
-+makeExcerpt('app/hero-detail.component.ts (excerpt)', 'import-input')
+  Declare that `hero` is an *input* property by annotating it with `@Input()`:
 
-:marked
-  Then declare that `hero` is an *input* property by
-  preceding it with the `@Input` decorator that you imported earlier.
-
-+makeExcerpt('app/hero-detail.component.ts (excerpt)', 'hero')
++makeExcerpt('lib/hero_detail_component.dart', 'inputs')
 
 .l-sub-section
   :marked
@@ -143,51 +147,25 @@ a#selector
 
 :marked
   That's it. The `hero` property is the only thing in the `HeroDetailComponent` class.
-
-+makeExcerpt('app/hero-detail.component.ts', 'class', '')
-
-:marked
   All it does is receive a hero object through its `hero` input property and then bind to that property with its template.
-
   Here's the complete `HeroDetailComponent`.
 
 +makeExample('app/hero-detail.component.ts')
 
-.l-main-section
-:marked
-  ## Declare _HeroDetailComponent_ in the _AppModule_
-
-  Every component must be declared in one&mdash;and only one&mdash;Angular module.
-
-  Open `app_module.dart` in your editor and import the `HeroDetailComponent` so you can refer to it.
-
-+makeExample('app/app.module.ts', 'hero-detail-import')
-
-:marked
-  Add `HeroDetailComponent` to the module's `declarations` array.
-
-+makeExcerpt('app/app.module.ts', 'declarations')
-
-:marked
-  In general, the `declarations` array contains a list of application components, pipes, and directives that belong to the module.
-  A component must be declared in a module before other components can reference it.
-  This module declares only the two application components, `AppComponent` and `HeroDetailComponent`.
-
-.l-sub-section
-  :marked
-    Read more about Angular modules in the [NgModules](../guide/ngmodule.html "Angular Modules (NgModule)") guide.
-
 a#add-hero-detail
 .l-main-section
 :marked
-  ## Add the _HeroDetailComponent_ to the _AppComponent_
+  ## Add _HeroDetailComponent_ to the _AppComponent_
 
-:marked
   The `AppComponent` is still a master/detail view.
   It used to display the hero details on its own, before you cut out that portion of the template.
   Now it will delegate to the `HeroDetailComponent`.
 
+  Start by importing the `HeroDetailComponent` so `AppComponent` can refer to it.
+
++makeExcerpt('lib/app_component.dart', 'hero-detail-import', '')
 
+:marked
   Recall that `hero-detail` is the CSS [`selector`](#selector "HeroDetailComponent selector")
   in the `HeroDetailComponent` metadata.
   That's the tag name of the element that represents the `HeroDetailComponent`.
@@ -199,22 +177,47 @@ a#add-hero-detail
   by binding the `selectedHero` property of the `AppComponent`
   to the `hero` property of the `HeroDetailComponent`.
 
-+makeExcerpt('app/app.component.1.html (excerpt)', 'hero-detail-binding')
+.code-example
+  code-example(language="html").
+    &lt;hero-detail [hero]="selectedHero">&lt;/hero-detail>
 
 :marked
- Now every time the `selectedHero` changes, the `HeroDetailComponent` gets a new hero to display.
+  Now every time the `selectedHero` changes, the `HeroDetailComponent` gets a new hero to display.
 
- The revised `AppComponent` template should look like this:
+  The revised `AppComponent` template should look like this:
 
-+makeExcerpt('app/app.component.ts (excerpt)', 'hero-detail-template')
++makeExcerpt('lib/app_component.dart (template)', 'hero-detail-template')
 
-.l-main-section
 :marked
-  ## What changed?
+  The detail _should_ update every time the user picks a new hero.  It's not
+  happening yet!  Click a heroe. No details. If you look for an error in the
+  console of the browser development tools. No error.
+
+  It is as if Angular were ignoring the new tag. That's because _it is
+  ignoring the new tag_.
+
+  ### The *directives* list
+
+  A browser ignores HTML tags and attributes that it doesn't recognize. So
+  does Angular.
+
+  You've imported `HeroDetailComponent`, and you've used `<hero-detail>` in
+  the template, but you haven't told Angular about it.
+
+  Just as you've done for the common Angular directives, you tell Angular
+  about the hero detail component by listing it in the metadata `directives`
+  list:
+
++makeExcerpt('lib/app_component.dart', 'directives')
+
+:marked
+  Refresh the browser. It works!
+
+  ## App design changes
 
   As [before](./toh-pt2.html), whenever a user clicks on a hero name,
   the hero detail appears below the hero list.
-  But now the `HeroDetailView` is presenting those details.
+  But now the `HeroDetailComponent` is presenting those details.
 
   Refactoring the original `AppComponent` into two components yields benefits, both now and in the future:
 
@@ -232,38 +235,32 @@ a#add-hero-detail
   Verify that you have the following structure:
 
 .filetree
-  .file angular-tour-of-heroes
+  .file angular_tour_of_heroes
   .children
-    .file src
+    .file lib
+    .children
+      .file app_component.dart
+      .file hero.dart
+      .file hero_detail_component.dart
+    .file web
     .children
-      .file app
-      .children
-        .file app.component.ts
-        .file app.module.ts
-        .file hero.ts
-        .file hero-detail.component.ts
-      .file main.ts
       .file index.html
+      .file main.dart
       .file styles.css
-      .file systemjs.config.js
-      .file tsconfig.json
-    .file node_modules ...
-    .file package.json
+    .file pubspec.yaml
 
 :marked
   Here are the code files discussed in this page.
 
 +makeTabs(`
-  toh-3/ts/app/hero-detail.component.ts,
-  toh-3/ts/app/app.component.ts,
-  toh-3/ts/app/hero.ts,
-  toh-3/ts/app/app.module.ts
+  toh-3/dart/lib/hero_detail_component.dart,
+  toh-3/dart/lib/app_component.dart,
+  toh-3/dart/lib/hero.dart
   `,'',`
-  src/app/hero-detail.component.ts,
-  src/app/app.component.ts,
-  src/app/hero.ts,
-  src/app/app.module.ts
- `)
+  lib/hero_detail_component.dart,
+  lib/app_component.dart,
+  lib/hero.dart
+  `)
 
 .l-main-section
 :marked
@@ -273,8 +270,7 @@ a#add-hero-detail
 
   * You created a reusable component.
   * You learned how to make a component accept input.
-  * You learned to declare the required application directives in an Angular module. You
-  listed the directives in the `NgModule` decorator's `declarations` array.
+  * You learned to declare the application directives in a `directives` list.
   * You learned to bind a parent component to a child component.
 
   Your app should look like this <live-example></live-example>.
