diff --git a/./src/angular/_jade/ts/latest/guide/component-styles.jade b/./src/angular/guide/component-styles.jade
index 072a2a1..4c34a51 100644
--- a/./src/angular/_jade/ts/latest/guide/component-styles.jade
+++ b/./src/angular/guide/component-styles.jade
@@ -1,5 +1,21 @@
-block includes
-  //- include ../_util-fns
+---
+layout: angular
+title: Component Styles
+description: Learn how to apply CSS styles to components.
+sideNavGroup: advanced
+prevpage:
+  title: Attribute Directives
+  url: /angular/guide/attribute-directives
+nextpage:
+  title: Hierarchical Dependency Injectors
+  url: /angular/guide/hierarchical-dependency-injection
+---
+//- FilePath: src/angular/guide/component-styles.jade
+
+- var _example = 'component-styles';
+include ../_util-fns
+
+//- TODO: consider adding material equivalent to TS Appendices 1 & 2 if relevant.
 
 :marked
   Angular applications are styled with standard CSS. That means you can apply
@@ -10,17 +26,8 @@ block includes
   with components, enabling a more modular design than regular stylesheets.
   
   This page describes how to load and apply these component styles.
-  
-  ## Table Of Contents
-
-  * [Using component styles](#using-component-styles)
-  * [Special selectors](#special-selectors)
-  * [Loading styles into components](#loading-styles)
-  * [Controlling view encapsulation: native, emulated, and none](#view-encapsulation)
-  * [Appendix 1: Inspecting the CSS generated in emulated view encapsulation](#inspect-generated-css)
-  * [Appendix 2: Loading styles with relative URLs](#relative-urls)
 
-  You can run the <live-example></live-example> in Plunker and download the code from there.
+  Run the <live-example></live-example> of the code shown in this page.
 
 .l-main-section
 :marked
@@ -48,7 +55,7 @@ block includes
   * Class names and selectors are local to the component and don't collide with 
     classes and selectors used elsewhere in the application.
   * Changes to styles elsewhere in the application don't affect the component's styles.
-  * You can co-locate the CSS code of each component with the TypeScript and HTML code of the component,
+  * You can co-locate the CSS code of each component with the Dart and HTML code of the component,
     which leads to a neat and tidy project structure.
   * You can change or remove component CSS code without searching through the
     whole application to find where else the code is used.
@@ -147,28 +154,11 @@ a(id='loading-styles')
 
 +makeExample('component-styles/ts/app/hero-details.component.ts', 'styleurls')
 
-block style-url
-  .alert.is-important
-    :marked
-      The URL is relative to the *application root*, which is usually the
-      location of the `index.html` web page that hosts the application. 
-      The style file URL is *not* relative to the component file.
-      That's why the example URL begins `lib/`.
-      To specify a URL relative to the component file, see [Appendix 2](#relative-urls).
-
-block module-bundlers
-  .l-sub-section
-    :marked
-      If you use module bundlers like Webpack, you can also use the `styles` attribute
-      to load styles from external files at build time. You could write:
-
-      `styles: [require('my.component.css')]`
-
-      Set the `styles` property, not the `styleUrls` property. The module 
-      bundler loads the CSS strings, not Angular. 
-      Angular sees the CSS strings only after the bundler loads them. 
-      To Angular, it's as if you wrote the `styles` array by hand. 
-      For information on loading CSS in this manner, refer to the module bundler's documentation.
+:marked
+  Note that the URLs in `styleUrls` are relative to the component.
+
+//- TODO: determine if an equivalent of the TS "module bundlers"
+//- material is relevant for Dart.
 
 :marked
   ### Template inline styles
@@ -183,7 +173,7 @@ block module-bundlers
   
   You can also embed `<link>` tags into the component's HTML template. 
   
-  As with `styleUrls`, the link tag's `href` URL is relative to the 
+  The link tag's `href` URL is relative to the 
   application root, not the component file.
 
 +makeExample('component-styles/ts/app/hero-team.component.ts', 'stylelink')
@@ -195,9 +185,14 @@ block module-bundlers
   For details, see [`@import`](https://developer.mozilla.org/en/docs/Web/CSS/@import)
   on the [MDN](https://developer.mozilla.org) site.
   
-block css-import-url
+  In *this* case the URL is relative to the CSS file into which we are importing.
+
+.alert.is-important
   :marked
-    In this case, the URL is relative to the CSS file into which you're importing.
+    URLs are currently not interpreted in this way, see 
+    [issue #39](https://github.com/dart-lang/angular2/issues/39).
+    Until this issue is fixed, absolute package-reference style URLs must 
+    be given, as illustrated below.
   
 +makeExample('component-styles/ts/app/hero-details.component.css', 'import', 'app/hero-details.component.css (excerpt)')
 
@@ -290,19 +285,18 @@ a#relative-urls
   ## Appendix 2: Loading styles with relative URLs
   
   It's common practice to split a component's code, HTML, and CSS into three separate files in the same directory:
+  
 code-example(format="nocode").
-  quest-summary.component.ts
-  quest-summary.component.html
-  quest-summary.component.css
+  quest_summary_component.dart
+  quest_summary_component.html
+  quest_summary_component.css
 
 :marked
   You include the template and CSS files by setting the `templateUrl` and `styleUrls` metadata properties respectively.
   Because these files are co-located with the component,
   it would be nice to refer to them by name without also having to specify a path back to the root of the application.
 
-block module-id
-  :marked
-    You can use a relative URL by prefixing your filenames with `./`:
+  Thankfully, this is the default interpretation of relative URLs in AngularDart:
 
-  +makeExample('app/quest-summary.component.ts')
++makeExcerpt('app/quest-summary.component.ts', 'urls', '')
 
