diff --git a/./src/angular/_jade/ts/latest/guide/hierarchical-dependency-injection.jade b/./src/angular/_jade/ts/_cache/guide/hierarchical-dependency-injection.jade
index cd8f592..6a18991 100644
--- a/./src/angular/_jade/ts/latest/guide/hierarchical-dependency-injection.jade
+++ b/./src/angular/_jade/ts/_cache/guide/hierarchical-dependency-injection.jade
@@ -69,7 +69,7 @@ figure.image-display
   Thus, a provider in an intermediate injector intercepts a request for a service from something lower in the tree.
   It effectively "reconfigures" and "shadows" a provider at a higher level in the tree.
 
-  If you only specify providers at the top level (typically the root `AppModule`), the tree of injectors appears to be flat.
+  If you only specify providers at the top level (typically the root `!{_AppModuleVsAppComp}`), the tree of injectors appears to be flat. 
   All requests bubble up to the root <span if-docs="ts"><code>NgModule</code></span> injector that you configured with the `!{_bootstrapModule}` method.
 
 .l-main-section
@@ -85,11 +85,11 @@ figure.image-display
   The guide sample includes a `VillainsListComponent` that displays a list of villains.
   It gets those villains from a `VillainsService`.
 
-  While you _could_ provide `VillainsService` in the root `AppModule` (that's where you'll find the `HeroesService`),
+  While you _could_ provide `VillainsService` in the root `!{_AppModuleVsAppComp}` (that's where you'll find the `HeroesService`), 
   that would make the `VillainsService` available everywhere in the application, including the _Hero_ workflows.
 
   If you later modified the `VillainsService`, you could break something in a hero component somewhere.
-  That's not supposed to happen but providing the service in the root `AppModule` creates that risk.
+  That's not supposed to happen but providing the service in `!{_AppModuleVsAppComp}` creates that risk.
 
   Instead, provide the `VillainsService` in the `providers` metadata of the `VillainsListComponent` like this:
 
@@ -196,10 +196,14 @@ figure.image-display
 figure.image-display
   img(src="/resources/images/devguide/dependency-injection/injector-tree.png" alt="car injector tree" width="600")
 
-.l-sub-section
-  :marked
-    The code for this _cars_ scenario is in the `car.components.ts` and `car.services.ts` files of the sample
-    which you can review and download from the <live-example></live-example>.
+:marked
+  Here is the code for this _cars_ scenario:
+
++makeTabs(
+  `hierarchical-dependency-injection/dart/lib/car_components.dart,
+   hierarchical-dependency-injection/dart/lib/car_services.dart`, null,
+  `lib/car_components.dart, lib/car_services.dart`)
+
 //- ## Advanced Dependency Injection in Angular
 //- Restrict Dependency Lookups
 //- [TODO] (@Host) This has been postponed for now until we come up with a decent use case
