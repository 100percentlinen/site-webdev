diff --git a/./src/angular/_jade/ts/latest/guide/server-communication.jade b/./src/angular/_jade/ts/_cache/guide/server-communication.jade
index e20bc48..126ef64 100644
--- a/./src/angular/_jade/ts/latest/guide/server-communication.jade
+++ b/./src/angular/_jade/ts/_cache/guide/server-communication.jade
@@ -19,55 +19,13 @@ block includes
   [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 
   The !{_Angular_http_library} simplifies application programming with the **XHR** and **JSONP** APIs.
-  # Contents
-
-  * [Demos](#demos)
-  * [Providing HTTP Services](#http-providers)
-  * [The Tour of Heroes *HTTP* client demo](#http-client)
-
-    - [The `HeroListComponent` class](#HeroListComponent)
-  * [Fetch data with `http.get()`](#fetch-data)
-  <li if-docs="ts"> [RxJS library](#rxjs-library)
-    <ul>
-      <li> [Enable RxJS operators](#enable-rxjs-operators)</li>
-    </ul>
-  </li>
-  * [Process the response object](#extract-data)
-
-    - [Parse to `JSON`](#parse-to-json)
-    - [Do not return the response object](#no-return-response-object)
-    - [Always handle errors](#error-handling)
-    - [`HeroListComponent` error handling](#hero-list-component)
-  * [Send data to the server](#update)
-
-    - [Headers](#headers)
-    - [JSON results](#json-results)
-
-  <ul><li if-docs="ts"> [Fall back to promises](#promises)</ul>
-
-  * [Cross-Origin Requests: Wikipedia example](#cors)
-  <ul if-docs="ts">
-    <li> [Search Wikipedia](#search-wikipedia)</li>
-    <li> [Search parameters](#search-parameters)</li>
-    <li> [The WikiComponent](#wikicomponent)</li>
-  </ul>
-  * [A wasteful app](#wasteful-app)
-  <li if-docs="ts"> [More fun with Observables](#more-observables)
-      <ul>
-        <li> [Create a stream of search terms](#create-stream)</li>
-        <li> [Listen for search terms](#listen-for-search-terms)</li>
-      </ul>
-  </li>
-  * [Guarding against Cross-Site Request Forgery](#xsrf)
-  * [Override default request headers (and other request options)](#override-default-request-options)
-  * [Appendix: Tour of Heroes _in-memory web api_](#in-mem-web-api)
 
   A <live-example>live example</live-example> illustrates these topics.
 
 a#demos
 .l-main-section
 :marked
-  # Demos
+  ## Demos
 
   This page describes server communication with the help of the following demos:
 
@@ -107,9 +65,9 @@ block demos-list
     Read about providers in the [Dependency Injection](dependency-injection.html) page.
 
 :marked
-  Register providers by importing other NgModules to the root NgModule in `app.module.ts`.
+  Register providers using the `bootstrap()` method:
 
-+makeExample('server-communication/ts/app/app.module.1.ts', null, 'app/app.module.ts (v1)')(format='.')
++makeExcerpt('app/main.ts (v1)')
 
 block http-providers
   :marked
@@ -125,7 +83,7 @@ block http-providers
       there is a JSONP demo later in this page.
       Loading its module now saves time.
 
-  .l-main-section#http-client
+.l-main-section#http-client
 :marked
   ## The Tour of Heroes HTTP client demo
 
@@ -227,8 +185,9 @@ a#HeroService
 
 .l-sub-section
   :marked
-    The server returns heroes once you've set up the [in-memory web api](#in-mem-web-api)
-    described in the appendix below.
+    The server returns heroes once you've set up the
+    [in-memory web api](../tutorial/toh-pt6#simulating-the-web-api)
+    described in the [tutorial](../tutorial).
     Alternatively, you can temporarily target a JSON file by changing the endpoint URL:
 
   +makeExcerpt('app/toh/hero.service.ts', 'endpoint-json', '')
@@ -379,14 +338,13 @@ block hlc-error-handling
   Now you'll add the ability to create new heroes and save them in the backend.
 
   You'll write a method for the `HeroListComponent` to call, a `create()` method, that takes
-  just the name of a new hero and returns an `Observable` of `Hero`. It begins like this:
+  just the name of a new hero. It begins like this:
 
 +makeExcerpt('app/toh/hero.service.ts', 'create-sig', '')
 
 :marked
   To implement it, you must know the server's API for creating heroes.
-
-  [This sample's data server](#in-mem-web-api) follows typical REST guidelines.
+  [This sample's data server](../tutorial/toh-pt6#simulating-the-web-api) follows typical REST guidelines.
   It expects a [`POST`](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5) request
   at the same endpoint as `GET` heroes.
   It expects the new hero data to arrive in the body of the request,
@@ -709,152 +667,8 @@ block wikipedia-jsonp+
     re-arranges them in their original request order,
     and delivers to subscribers only the most recent search results.
 
-a#xsrf
-.l-main-section
-:marked
-  ## Guarding against Cross-Site Request Forgery
-
-  In a cross-site request forgery (CSRF or XSRF), an attacker tricks the user into visiting
-  a different web page with malignant code that secretly sends a malicious request to your application's web server.
-
-  The server and client application must work together to thwart this attack.
-  Angular's `Http` client does its part by applying a default `CookieXSRFStrategy` automatically to all requests.
-
-  The `CookieXSRFStrategy` supports a common anti-XSRF technique in which the server sends a randomly
-  generated authentication token in a cookie named `XSRF-TOKEN`.
-  The HTTP client adds an `X-XSRF-TOKEN` header with that token value to subsequent requests.
-  The server receives both the cookie and the header, compares them, and processes the request only if the cookie and header match.
-
-  See the [XSRF topic on the Security page](security.html#xsrf) for more information about XSRF and Angular's `XSRFStrategy` counter measures.
-
-a#override-default-request-options
-.l-main-section
-:marked
-  ## Override default request headers (and other request options)
-
-  Request options (such as headers) are merged into the
-  [default _RequestOptions_](https://angular.io/docs/ts/latest/api/http/index/BaseRequestOptions-class.html "API: BaseRequestOptions")
-  before the request is processed.
-  The `HttpModule` provides these default options via the `RequestOptions` token.
-
-  You can override these defaults to suit your application needs
-  by creating a custom sub-class of `RequestOptions`
-  that sets the default options for the application.
-
-  This sample creates a class that sets the default `Content-Type` header to JSON.
-  It exports a constant with the necessary `RequestOptions` provider to simplify registration in `AppModule`.
-
-+makeExcerpt('app/default-request-options.service.ts')
-
-:marked
-  Then it registers the provider in the root `AppModule`.
-
-+makeExcerpt('app/app.module.ts (provide default request header)', 'provide-default-request-options')
-
-.l-sub-section
- :marked
-   Remember to include this provider during setup when unit testing the app's HTTP services.
-
-:marked
-  After this change, the `header` option setting in `HeroService.create()` is no longer necessary,
-
-+makeExcerpt('app/toh/hero.service.ts', 'create')
-
-:marked
-  You can confirm that `DefaultRequestOptions` is working by examing HTTP requests in the browser developer tools' network tab.
-  If you're short-circuiting the server call with something like the [_in-memory web api_](#in-mem-web-api),
-  try commenting-out the `create` header option,
-  set a breakpoint on the POST call, and step through the request processing
-  to verify the header is there.
-
-  Individual requests options, like this one, take precedence over the default `RequestOptions`.
-  It might be wise to keep the `create` request header setting for extra safety.
-
-a#in-mem-web-api
-.l-main-section
-:marked
-  ## Appendix: Tour of Heroes _in-memory web api_
-
-  If the app only needed to retrieve data, you could get the heroes from a `heroes.json` file:
-
-- var _heroesJsonPath = (_docsFor == 'dart' ? 'web' : 'src/app') + '/heroes.json';
-+makeJson('server-communication/' + _docsFor + '/' + _heroesJsonPath, null, _heroesJsonPath)(format=".")
-
-.l-sub-section
-  :marked
-    You wrap the heroes array in an object with a `data` property for the same reason that a data server does:
-    to mitigate the [security risk](http://stackoverflow.com/questions/3503102/what-are-top-level-json-arrays-and-why-are-they-a-security-risk)
-    posed by top-level JSON arrays.
-
-:marked
-  You'd set the endpoint to the JSON file like this:
-
-+makeExcerpt('app/toh/hero.service.ts', 'endpoint-json')
-
-- var _a_ca_class_with = _docsFor === 'ts' ? 'a custom application class with' : ''
-:marked
-  The *get heroes* scenario would work,
-  but since the app can't save changes to a JSON file, it needs a web API server.
-  Because there isn't a real server for this demo,
-  it substitutes the Angular _in-memory web api_ simulator for the actual XHR backend service.
-
-.l-sub-section
-  :marked
-    The in-memory web api is not part of Angular _proper_.
-    It's an optional service in its own
-    <a href="https://github.com/angular/in-memory-web-api" target="_blank" rel="noopener" title="In-memory Web API"><i>angular-in-memory-web-api</i></a>
-    library installed with npm (see `package.json`).
-
-    See the
-    <a href="https://github.com/angular/in-memory-web-api/blob/master/README.md" target="_blank" rel="noopener" title='In-memory Web API "README.md"'><i>README file</i></a>
-    for configuration options, default behaviors, and limitations.
-
-:marked
-  The in-memory web API gets its data from !{_a_ca_class_with} a `createDb()`
-  method that returns a map whose keys are collection names and whose values
-  are !{_array}s of objects in those collections.
-
-  Here's the class for this sample, based on the JSON data:
-
-+makeExcerpt('app/hero-data.ts')
-
-:marked
-  Ensure that the `HeroService` endpoint refers to the web API:
-
-+makeExcerpt('app/toh/hero.service.ts', 'endpoint')
-
-block redirect-to-web-api
-  :marked
-    Finally, redirect client HTTP requests to the in-memory web API by
-    adding the `InMemoryWebApiModule` to the `AppModule.imports` list.
-    At the same time, call its `forRoot()` configuration method with the `HeroData` class.
-
-  +makeExcerpt('app/app.module.ts', 'in-mem-web-api')
-
-  :marked
-    ### How it works
-
-    Angular's `http` service delegates the client/server communication tasks
-    to a helper service called the `XHRBackend`.
-
-    Using standard Angular provider registration techniques, the `InMemoryWebApiModule`
-    replaces the default `XHRBackend` service with its own in-memory alternative.
-    At the same time, the `forRoot` method initializes the in-memory web API with the *seed data* from the mock hero dataset.
-
-  .l-sub-section
-    :marked
-      The `forRoot()` method name is a strong reminder that you should only call the `InMemoryWebApiModule` _once_,
-      while setting the metadata for the root `AppModule`. Don't call it again.
-
-:marked
-  Here is the final, revised version of `lib/app_module.dart`, demonstrating these steps.
-
-+makeExcerpt('app/app.module.ts')
-
-.alert.is-important
-  :marked
-    Import the `InMemoryWebApiModule` _after_ the `HttpModule` to ensure that
-    the `XHRBackend` provider of the `InMemoryWebApiModule` supersedes all others.
+//- Skip Cross-Site Request Forgery section for now.
+//- Drop "in-memory web api" appendix since we refer readers to the tutorial.
 
 :marked
   See the full source code in the <live-example></live-example>.
