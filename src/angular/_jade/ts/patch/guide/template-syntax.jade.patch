diff --git a/./src/angular/_jade/ts/latest/guide/template-syntax.jade b/./src/angular/guide/template-syntax.jade
index 2d3d585..4ab938c 100644
--- a/./src/angular/_jade/ts/latest/guide/template-syntax.jade
+++ b/./src/angular/guide/template-syntax.jade
@@ -1,18 +1,29 @@
-block includes
-  //- include ../_util-fns
-  - var _JavaScript = 'JavaScript';
-  //- Double underscore means don't escape var, use !{__var}.
-  - var __chaining_op = '<code>;</code> or <code>,</code>';
-  - var __new_op = '<code>new</code>';
-  - var __objectAsMap = 'object';
+---
+layout: angular
+title: Template Syntax
+description: Learn how to write templates that display data and consume user events with the help of data binding.
+sideNavGroup: basic
+prevpage:
+  title: Dependency Injection
+  url: /angular/guide/dependency-injection
+nextpage:
+  title: Attribute Directives
+  url: /angular/guide/attribute-directives
+---
+//- FilePath: src/angular/guide/template-syntax.jade
+
+//- Double underscore means don't escape var, use !{__var}.
+include ../_util-fns
+- var _example = 'template-syntax';
+- var _JavaScript = 'Dart';
+- var __chaining_op = '<code>;</code>';
+- var __new_op = '<code>new</code> or <code>const</code>';
+- var mapApiRef = 'https://api.dartlang.org/stable/dart-core/Map-class.html';
+- var __objectAsMap = '<b><a href="' + mapApiRef + '">Map</a></b>'
+
+:marked
+  {{page.description}}
 
-//- The docs standard h4 style uppercases, making code terms unreadable. Override it.
-style.
-  h4 {font-size: 17px !important; text-transform: none !important;}
-  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }
-  h4 .syntax { font-size: 100%; }
-
-:marked
   The Angular application manages what the user sees and can do, achieving this through the interaction of a
   component class instance (the *component*) and its user-facing template.
 
@@ -84,7 +95,7 @@ a#interpolation
 :marked
   ## Interpolation ( <span class="syntax">{&#xfeff;{...}}</span> )
 
-  You met the double-curly braces of interpolation, `{{` and `}}`, early in your Angular education.
+  You met the double-curly braces of interpolation, {% raw %}`{{`{% endraw %} and `}}`, early in your Angular education.
 
 +makeExcerpt('app/app.component.html', 'first-interpolation', '')
 
@@ -131,7 +142,7 @@ a#template-expressions
   Angular executes the expression and assigns it to a property of a binding target;
   the target might be an HTML element, a component, or a directive.
 
-  The interpolation braces in `{{1 + 1}}` surround the template expression `1 + 1`.
+  The interpolation braces in `{% raw %}{{1 + 1}}{% endraw %}` surround the template expression `1 + 1`.
   In the [property binding](#property-binding) section below,
   a template expression appears in quotes to the right of the&nbsp;`=` symbol as in `[property]="expression"`.
 
@@ -149,8 +160,11 @@ a#template-expressions
 :marked
   Other notable differences from #{_JavaScript} syntax include:
 
+  * no support for Dart string interpolation; for example,
+    instead of `"'The title is $title'"`, you must write
+    `"'The title is ' + title"`
   * no support for the bitwise operators `|` and `&`
-  * new [template expression operators](#expression-operators), such as `|` and `?.`
+  * new [template expression operators](#expression-operators), such as `|`
 
 a#expression-context
 :marked
@@ -177,14 +191,15 @@ a#expression-context
   and, lastly, the component's member names.
 
   The previous example presents such a name collision. The component has a `hero`
-  property and the `*ngFor` defines a `hero` template variable.
-  The `hero` in `{{hero.name}}`
+  property and the `*ngFor` defines a `hero` template variable. 
+  The `hero` in `{% raw %}{{hero.name}}{% endraw %}`
   refers to the template input variable, not the component's property.
 
-  Template expressions cannot refer to anything in
-  the global namespace. They can't refer to `window` or `document`. They
-  can't call `console.log` or `Math.max`. They are restricted to referencing
-  members of the expression context.
+  Template expressions cannot refer to static
+  properties, nor to top-level variables or functions, such as `window` or
+  `document` from `dart:html`. They can’t directly call `print` or functions
+  imported from `dart:math`. They are restricted to referencing members of
+  the expression context.
 
 a(href="#toc") back to top
 
@@ -302,9 +317,10 @@ a#template-statements
   In `deleteHero(hero)` above, the `hero` is the template input variable,
   not the component's `hero` property.
 
-  Template statements cannot refer to anything in the global namespace. They
-  can't refer to `window` or `document`.
-  They can't call `console.log` or `Math.max`.
+  Template statements cannot refer to static properties on the class, nor to
+  top-level variables or functions, such as `window` or `document` from
+  `dart:html`. They can’t directly call `print` or functions imported from
+  `dart:math`.
 
   ### Statement guidelines
 
@@ -345,7 +361,7 @@ table(width="100%")
     td One-way<br>from data source<br>to view target
     td
       code-example().
-        {{expression}}
+        {% raw %}{{expression}}{% endraw %}
         [target]="expression"
         bind-target="expression"
     td.
@@ -644,6 +660,16 @@ a#property-binding
 
 +makeExcerpt('app/app.component.html', 'property-binding-4', '')
 
+.callout.is-helpful
+  header Checked mode type exceptions
+  :marked
+    In checked mode, if the template expression result type and the target
+    property type are not assignment compatible, then a type exception will
+    be thrown.
+    For information on checked mode, see
+    [Important concepts](https://www.dartlang.org/docs/dart-up-and-running/ch02.html#important-concepts)
+    in the Dart language tour.
+
 :marked
   ### Remember the brackets
 
@@ -656,6 +682,12 @@ a#property-binding
 
 +makeExcerpt('app/app.component.html', 'property-binding-6', '')
 
+.callout.is-helpful
+  header Checked mode type exception example
+  :marked
+    In checked mode, the code above will result in a type exception:
+    `String` isn't a subtype of `Hero`.
+
 a#one-time-initialization
 :marked
   ### One-time string initialization
@@ -701,7 +733,7 @@ a#one-time-initialization
 
 :marked
   Fortunately, Angular data binding is on alert for dangerous HTML.
-  It *sanitizes* the values before displaying them.
+  It [*sanitizes*](security#sanitization-and-security-contexts) the values before displaying them.
   It **will not** allow HTML with script tags to leak into the browser, neither with interpolation
   nor property binding.
 
@@ -748,7 +780,7 @@ a#other-bindings
   This fact becomes painfully obvious when you write something like this.
 
 code-example(language="html").
-  &lt;tr&gt;&lt;td colspan="{{1 + 1}}"&gt;Three-Four&lt;/td&gt;&lt;/tr&gt;
+  &lt;tr&gt;&lt;td colspan="{% raw %}{{1 + 1}}{% endraw %}"&gt;Three-Four&lt;/td&gt;&lt;/tr&gt;
 
 :marked
   And you get this error:
@@ -852,6 +884,18 @@ a(href="#toc") back to top
     [dash-case](glossary.html#dash-case), as shown above, or
     [camelCase](glossary.html#camelcase), such as `fontSize`.
 
+.callout.is-helpful
+  header Style property names
+  :marked
+    While [camelCase](glossary.html#camelcase) and
+    [dash-case](glossary.html#dash-case) style property naming schemes are
+    equivalent in AngularDart, only dash-case names are recognized by the
+    `dart:html` [CssStyleDeclaration][CssSD] methods `getPropertyValue()`
+    and `setProperty()`.
+    So using dash-case for style property names is generally preferred.
+
+    [CssSD]: https://api.dartlang.org/stable/dart-html/CssStyleDeclaration-class.html
+
 a(href="#toc") back to top
 
 .l-hr
@@ -1051,7 +1095,7 @@ a#two-way
 :marked
   The `AppComponent.fontSizePx` establishes the initial `SizerComponent.size` value.
   Clicking the buttons updates the `AppComponent.fontSizePx` via the two-way binding.
-  The revised `AppComponent.fontSizePx` value flows through to the _style_ binding,
+  The revised `size` value flows through to the _style_ binding,
   making the displayed text bigger or smaller.
 
   The two-way binding syntax is really just syntactic sugar for a _property_ binding and an _event_ binding.
@@ -1105,8 +1149,8 @@ a#attribute-directives
   They are usually applied to elements as if they were HTML attributes, hence the name.
 
   Many details are covered in the [_Attribute Directives_](attribute-directives.html) guide.
-  Many Angular modules such as the [`RouterModule`](router.html "Routing and Navigation")
-  and the [`FormsModule`](forms.html "Forms") define their own attribute directives.
+  Many Angular packages such as the [`Router`](router.html "Routing and Navigation")
+  and [`Forms`](forms.html "Forms") packages define their own attribute directives.
   This section is an introduction to the most commonly used attribute directives:
 
   * [`NgClass`](#ngClass) - add and remove a set of CSS classes
@@ -1294,8 +1338,8 @@ a#structural-directives
 
   * why you
   [_prefix the directive name with an asterisk_ (\*)](structural-directives.html#asterisk "The * in *ngIf").
-  * to use [`<ng-container>`](structural-directives.html#ngcontainer "<ng-container>")
-  to group elements when there is no suitable host element for the directive.
+  * how to [group elements](structural-directives#group-sibling-elements)
+  when there is no suitable host element for the directive.
   * how to write your own structural directive.
   * that you can only apply [one structural directive](structural-directives.html#one-per-element "one per host element") to an element.
 
@@ -1325,6 +1369,28 @@ a#ngIf
   When the expression is #{_falsy}, `NgIf` removes the `HeroDetailComponent`
   from the DOM, destroying that component and all of its sub-components.
 
+.callout.is-helpful
+  header No truthy/falsy values
+  :marked
+    In checked mode, Dart expects Boolean values
+    (those with type `bool`) to be either `true` or `false`.
+    Even in production mode, the only value Dart treats as `true` is
+    the value `true`; all other values are `false`.
+    TypeScript and JavaScript, on the other hand, treat
+    many values (including non-null objects) as true.
+    A TypeScript Angular program, for example, often has code like
+    `*ngIf="currentHero"` where a Dart program has code like
+    `*ngIf="currentHero != null"`.
+
+    When converting TypeScript code to Dart code, watch out for
+    true/false problems. For example, forgetting the `!= null`
+    can lead to exceptions in checked mode, such as
+    "EXCEPTION: type 'Hero' is not a subtype of type 'bool' of 'boolean expression'".
+    For more information, see
+    [Booleans](https://www.dartlang.org/docs/dart-up-and-running/ch02.html#booleans)
+    in the [Dart language tour](https://www.dartlang.org/docs/dart-up-and-running/ch02.html).
+
+:marked
   #### Show/hide is not the same thing
 
   You can control the visibility of an element with a
@@ -1487,7 +1553,7 @@ a#ngSwitch
 :marked
   ### The _NgSwitch_ directives
 
-  *NgSwitch* is like the JavaScript `switch` statement.
+  *NgSwitch* is like the !{_JavaScript} `switch` statement.
   It can display _one_ element from among several possible elements, based on a _switch condition_.
   Angular puts only the *selected* element into the DOM.
 
@@ -1516,7 +1582,7 @@ figure.image-display
   * `NgSwitchDefault` adds its element to the DOM when there is no selected `NgSwitchWhen`.
 
   The switch directives are particularly useful for adding and removing *component elements*.
-  This example switches among four "emotional hero" components defined in the `hero-switch.components.ts` file.
+  This example switches among four "emotional hero" components defined in the `hero_switch_components.dart` file.
   Each component has a `hero` [input property](#inputs-outputs "Input property")
   which is bound to the `currentHero` of the parent component.
 
@@ -1568,10 +1634,8 @@ a#ref-var
   A template reference variable, `heroForm`, appears three times in this example, separated
   by a large amount of HTML.
   What is the value of `heroForm`?
-
-  If Angular hadn't taken it over when you imported the `FormsModule`,
-  it would be the [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement).
-  The `heroForm` is actually a reference to an Angular [NgForm](/angular/api/angular2.common/NgForm-class.html "API: NgForm")
+  The `heroForm` is a reference to an Angular 
+  [NgForm](/angular/api/angular2.common/NgForm-class.html "API: NgForm")
   directive with the ability to track the value and validity of every control in the form.
 
   The native `<form>` element doesn't have a `form` property.
@@ -1621,7 +1685,7 @@ a#inputs-outputs
     The *source* is on the *right* of the `=`.
 
     The *target* of a binding is the property or event inside the binding punctuation: `[]`, `()` or `[()]`.
-    The *source* is either inside quotes (`" "`) or within an interpolation (`{{}}`).
+    The *source* is either inside quotes (`" "`) or within an interpolation ({% raw %}`{{}}`{% endraw %}).
 
     Every member of a **source** directive is automatically available for binding.
     You don't have to do anything special to access a directive member in a template expression or statement.
@@ -1653,7 +1717,7 @@ a#inputs-outputs
 
   Target properties must be explicitly marked as inputs or outputs.
 
-  In the `HeroDetailComponent`, such properties are marked as input or output properties using decorators.
+  In the `HeroDetailComponent`, such properties are marked as input or output properties using !{_decorator}s.
 
 +makeExcerpt('app/hero-detail.component.ts', 'input-output-1', '')
 
@@ -1665,7 +1729,7 @@ a#inputs-outputs
   +makeExcerpt('app/hero-detail.component.ts', 'input-output-2', '')
 
   :marked
-    You can specify an input/output property either with a decorator or in a metadata #{_array}.
+    You can specify an input/output property either with a !{_decorator} or in a metadata #{_array}.
     Don't do both!
 
 :marked
@@ -1755,7 +1819,7 @@ a#pipe
 +makeExcerpt('app/app.component.html', 'pipes-3', '')
 
 :marked
-  The `json` pipe is particularly helpful for debugging bindings:
+  The `json` pipe can be helpful for debugging bindings:
 
 +makeExcerpt('app/app.component.html', 'pipes-json', '')
 
@@ -1775,8 +1839,10 @@ a#safe-navigation-operator
 :marked
   ### The safe navigation operator ( <span class="syntax">?.</span> ) and null property paths
 
-  The Angular **safe navigation operator (`?.`)** is a fluent and convenient way to
-  guard against null and undefined values in property paths.
+  The Angular **safe navigation operator (`?.`)**, like the Dart 
+  [conditional member access](https://www.dartlang.org/guides/language/language-tour#other-operators) operator,
+  is a fluent and convenient way to
+  guard against null values in property paths.
   Here it is, protecting against a view render failure if the `currentHero` is null.
 
 +makeExcerpt('app/app.component.html', 'safe-2', '')
@@ -1794,13 +1860,13 @@ a#safe-navigation-operator
   that displays the `name` of a null hero.
 
 code-example(language="html").
-  The null hero's name is {{nullHero.name}}
+  The null hero's name is {% raw %}{{nullHero.name}}{% endraw %}
 
 :marked
-  JavaScript throws a null reference error, and so does Angular:
+  Dart throws an exception, and so does Angular:
 
 code-example(format="nocode").
-  TypeError: Cannot read property 'name' of null in [null].
+  EXCEPTION: The null object does not have a getter 'name'.
 
 :marked
   Worse, the *entire view disappears*.
@@ -1822,13 +1888,6 @@ code-example(format="nocode").
 
 +makeExcerpt('app/app.component.html', 'safe-4', '')
 
-block safe-op-alt
-  :marked
-    You could try to chain parts of the property path with `&&`, knowing that the expression bails out
-    when it encounters the first null.
-
-  +makeExcerpt('app/app.component.html', 'safe-5', '')
-
 :marked
   These approaches have merit but can be cumbersome, especially if the property path is long.
   Imagine guarding against a null somewhere in a long property path such as `a.b.c.d`.
