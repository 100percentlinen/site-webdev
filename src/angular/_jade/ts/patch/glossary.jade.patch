diff --git a/./src/angular/_jade/ts/latest/glossary.jade b/./src/angular/glossary.jade
index fae5bc1..2518623 100644
--- a/./src/angular/_jade/ts/latest/glossary.jade
+++ b/./src/angular/glossary.jade
@@ -1,12 +1,16 @@
-block includes
-  //- include _util-fns
-
-//- current.path = ['docs', lang, 'latest', ...]
-- var lang = current.path[1]
+---
+layout: angular
+title: Glossary
+description: Brief definitions of the most important words in the Angular vocabulary
+---
+//- FilePath: src/angular/glossary.jade
+
+- var lang = 'dart'
 - var docsPath='/' + current.path[0]
 - var docsLatest='/angular';
-- var _at = lang === 'js' ? '' : '@'
-- var _decoratorLink = '<a href="#' + _decorator + '">' + _decorator + '</a>'
+- var _at = '@'
+- var _example = 'glossary';
+include _util-fns
 
 :marked
   Angular has a vocabulary of its own.
@@ -23,41 +27,24 @@ block includes
 
 .l-main-section#A
 
-a#aot
 :marked
-  ## Ahead-of-time (AOT) compilation
+  ## Annotation
 .l-sub-section
   :marked
-    You can compile Angular applications at build-time.
-    By compiling your application<span if-docs="ts"> using the compiler-cli, `ngc`</span>, you can bootstrap directly
-    to a<span if-docs="ts"> module</span> factory, meaning you don't need to include the Angular compiler in your JavaScript bundle.
-    Ahead-of-time compiled applications also benefit from decreased load time and increased performance.
-
-+ifDocsFor('ts')
-  :marked
-    ## Angular module
-  .l-sub-section
-    :marked
-      Helps you organize an application into cohesive blocks of functionality.
-      An Angular module identifies the components, directives, and pipes that the application uses along with the list of external Angular modules that the application needs, such as `FormsModule`.
-
-      Every Angular application has an application root module class. By convention, the class is
-      called `AppModule` and resides in a file named `app.module.ts`.
+    When unqualified, _annotation_ refers to a Dart metadata
+    annotation (as opposed to, say, a type annotation).  A metadata
+    annotation begins with the character `@`, followed by either a reference
+    to a compile-time constant (such as [`Component`](#component)) or a call
+    to a constant constructor. See the [Dart Language Guide][metadata] for
+    details.
 
-      For details and examples, see the [Angular Module](!{docsLatest}/guide/ngmodule.html) page.
+    The corresponding term in TypeScript and JavaScript is
+    _decorator_.
 
-+ifDocsFor('ts|dart')
-  :marked
-    ## Annotation
-  .l-sub-section
-    block annotation-defn
-      :marked
-        In practice, a synonym for [Decoration](#decorator).
+    [metadata]: https://www.dartlang.org/guides/language/language-tour#metadata
 
-a#attribute-directive
-a#attribute-directives
 :marked
-  ## Attribute directives
+  ## Attribute directive
 .l-sub-section
   :marked
     A category of [directive](#directive) that can listen to and modify the behavior of
@@ -66,51 +53,8 @@ a#attribute-directives
 
     A good example of an attribute directive is the `ngClass` directive for adding and removing CSS class names.
 
-    Learn about them in the [_Attribute Directives_](!{docsLatest}/guide/attribute-directives.html) guide.
-
 .l-main-section#B
 
-+ifDocsFor('ts|js')
-  :marked
-    ## Barrel
-  .l-sub-section
-    :marked
-      A barrel is a way to *rollup exports* from several ES2015 modules into a single convenient ES2015 module.
-      The barrel itself is an ES2015 module file that re-exports *selected* exports of other ES2015 modules.
-
-      Imagine three ES2015 modules in a `heroes` folder:
-    code-example.
-      // heroes/hero.component.ts
-      export class HeroComponent {}
-
-      // heroes/hero.model.ts
-      export class Hero {}
-
-      // heroes/hero.service.ts
-      export class HeroService {}
-    :marked
-      Without a barrel, a consumer would need three import statements:
-    code-example.
-      import { HeroComponent } from '../heroes/hero.component.ts';
-      import { Hero }          from '../heroes/hero.model.ts';
-      import { HeroService }   from '../heroes/hero.service.ts';
-    :marked
-      You can add a barrel to the `heroes` folder (called `index`, by convention) that exports all of these items:
-    code-example.
-      export * from './hero.model.ts';   // re-export all of its exports
-      export * from './hero.service.ts'; // re-export all of its exports
-      export { HeroComponent } from './hero.component.ts'; // re-export the named thing
-    :marked
-      Now a consumer can import what it needs from the barrel.
-    code-example.
-      import { Hero, HeroService } from '../heroes'; // index is implied
-    :marked
-      The Angular [scoped packages](#scoped-package) each have a barrel named `index`.
-
-    .alert.is-important
-      :marked
-        Note that you can often achieve this using [Angular modules](#angular-module) instead.
-
 :marked
   ## Binding
 .l-sub-section
@@ -125,11 +69,17 @@ a#attribute-directives
 :marked
   ## Bootstrap
 .l-sub-section
-  block bootstrap-defn-top
-    :marked
-      You launch an Angular application by "bootstrapping" it using the application root Angular module (`AppModule`). Bootstrapping identifies an application's top level "root" [component](#component), which is the first component that is loaded for the application. 
-      For more information, see the [Setup](!{docsLatest}/guide/setup.html) page.
   :marked
+    You launch an Angular application by "bootstrapping" it with the
+    [bootstrap][bootstrap] method. Bootstrapping identifies an
+    application's top level "root" [component](#component), which is 
+    the first component that is loaded for the application, and optionally
+    registers service [providers](#provider) with the [dependency injection
+    system](#dependency-injection).
+    For more information, see the [Setup](!{docsLatest}/guide/setup.html) page.
+
+    [bootstrap]: !{docsLatest}/api/angular2.platform.browser/bootstrap.html
+
     You can bootstrap multiple apps in the same `index.html`, each with its own top level root.
 
 .l-main-section#C
@@ -140,12 +90,11 @@ a#attribute-directives
     The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter
     _except the first letter, which is lowercase_.
 
-    Function, property, and method names are typically spelled in camelCase. Examples include: `square`, `firstName` and `getHeroes`. Notice that `square` is an example of how you write a single word in camelCase.
+    Function, property, and method names are typically spelled in camelCase. Examples: `square`, `firstName`, `getHeroes`.
 
     This form is also known as **lower camel case**, to distinguish it from **upper camel case**, which is [PascalCase](#pascalcase).
     When you see "camelCase" in this documentation it always means *lower camel case*.
 
-a#component
 :marked
   ## Component
 .l-sub-section
@@ -199,39 +148,14 @@ a#component
      * [Style binding](!{docsLatest}/guide/template-syntax.html#style-binding).
      * [Two-way data binding with ngModel](!{docsLatest}/guide/template-syntax.html#ngModel).
 
-
-+ifDocsFor('ts|dart')
-  a#decorator
-  a#decoration
+a#decorator
+a#decoration
+:marked
+  ## Decorator | decoration
+.l-sub-section
   :marked
-    ## Decorator | decoration
-  .l-sub-section
-    block decorator-defn
-      :marked
-        A decorator is a **function** that adds metadata to a class, its members (properties, methods) and function arguments.
-
-        Decorators are a JavaScript language [feature](https://github.com/wycats/javascript-decorators), implemented in TypeScript and proposed for ES2016 (AKA ES7).
-
-        To apply a decorator, position it immediately above or to the left of the thing it decorates.
-
-        Angular has its own set of decorators to help it interoperate with your application parts.
-        Here is an example of a `@Component` decorator that identifies a
-        class as an Angular [component](#component) and an `@Input` decorator applied to the `name` property
-        of that component. The elided object argument to the `@Component` decorator would contain the pertinent component metadata.
-        ```
-        @Component({...})
-        export class AppComponent {
-          constructor(@Inject('SpecialFoo') public foo:Foo) {}
-          @Input() name:string;
-        }
-        ```
-        The scope of a decorator is limited to the language feature
-        that it decorates. None of the decorations shown here will "leak" to other
-        classes appearing below it in the file.
-
-      .alert.is-important
-        :marked
-          Always include parentheses `()` when applying a decorator.
+    JavaScript terms that, in this documentation, refer to an
+    [annotation](#annotation).
 
 :marked
   ## Dependency injection
@@ -250,7 +174,7 @@ a#component
     that "B" is a dependency of "A".
 
     You can ask a "dependency injection system" to create "A"
-    and it will handle all of "A"s dependencies.
+    for us and handle all the dependencies.
     If "A" needs "B" and "B" needs "C", the system resolves that chain of dependencies
     and returns a fully prepared instance of "A".
 
@@ -281,12 +205,9 @@ a#component
     Registering providers is a critical preparatory step.
 
     Angular registers some of its own providers with every injector.
-    You can register your own providers.
+    We can register our own providers.
 
     Read more in the [Dependency Injection](!{docsLatest}/guide/dependency-injection.html) page.
-
-a#directive
-a#directives
 :marked
   ## Directive
 .l-sub-section
@@ -294,7 +215,8 @@ a#directives
     An Angular class responsible for creating, reshaping, and interacting with HTML elements
     in the browser DOM. Directives are Angular's most fundamental feature.
 
-    A directive is almost always associated with an HTML element or attribute.
+    A Directive is almost always associated with an HTML element or attribute.
+    We often refer to such an element or attribute as the directive itself.
     When Angular finds a directive in an HTML template,
     it creates the matching directive class instance
     and gives the instance control over that portion of the browser DOM.
@@ -304,19 +226,20 @@ a#directives
     as if you were writing native HTML. In this way, directives become extensions of
     HTML itself.
 
-    Directives fall into three categories:
+    Directives fall into one of three categories:
 
     1. [Components](#component) that combine application logic with an HTML template to
-    render application [views](#view). Components are usually represented as HTML elements.
+    render application [views]. Components are usually represented as HTML elements.
     They are the building blocks of an Angular application and the
     developer can expect to write a lot of them.
 
     1. [Attribute directives](#attribute-directive) that can listen to and modify the behavior of
-    HTML elements, components, and other directives. They are usually represented
+    other HTML elements, attributes, properties, and components. They are usually represented
     as HTML attributes, hence the name.
 
-    1. [Structural directives](#structural-directive) that
-    shape or reshape HTML layout, typically by adding and removing elements in the DOM.
+    1. [Structural directives](#structural-directive), a directive responsible for
+    shaping or reshaping HTML layout, typically by adding, removing, or manipulating
+    elements and their children.
 
 .l-main-section#E
 
@@ -326,18 +249,6 @@ a#directives
   :marked
     The [official JavaScript language specification](https://en.wikipedia.org/wiki/ECMAScript).
 
-    The latest approved version of JavaScript is
-    [ECMAScript 2016](http://www.ecma-international.org/ecma-262/7.0/)
-    (AKA "ES2016" or "ES7") and many Angular developers write their applications
-    either in this version of the language or a dialect that strives to be
-    compatible with it, such as [TypeScript](#typescript).
-
-    Most modern browsers today only support the much older "ECMAScript 5" (AKA ES5) standard.
-    Applications written in ES2016, ES2015 or one of their dialects must be "[transpiled](#transpile)"
-    to ES5 JavaScript.
-
-    Angular developers may choose to write in ES5 directly.
-
 :marked
   ## ES2015
 .l-sub-section
@@ -396,16 +307,6 @@ a#H
     [Template Syntax](!{docsLatest}/guide/template-syntax.html) page.
 
 .l-main-section#J
-
-a#jit
-:marked
-  ## Just-in-time (JIT) compilation
-.l-sub-section
-  :marked
-    With Angular _just-in-time_  bootstrapping you compile your components<span if-docs="ts"> and modules</span> in the browser
-    and launch the application dynamically. This is a good choice during development.
-    Consider using the [ahead-of-time](#aot) mode for production apps.
-
 .l-main-section#K
 :marked
   ## kebab-case
@@ -444,38 +345,13 @@ a#jit
 :marked
   ## Module
 .l-sub-section
-  block module-defn
-    .alert.is-important
-      :marked
-       In Angular, there are two types of modules:
-       - [Angular modules](#angular-module).
-       For details and examples, see the [Angular Modules](!{docsLatest}/guide/ngmodule.html) page.
-       - ES2015 modules, as described in this section.
-
-    :marked
-      Angular apps are modular.
-
-      In general, you assemble your application from many modules, both the ones you write and the ones you acquire from others.
-
-      A typical module is a cohesive block of code dedicated to a single purpose.
-
-      A module **exports** something of value in that code, typically one thing such as a class.
-      A module that needs that thing, **imports** it.
-
-      The structure of Angular modules and the import/export syntax
-      is based on the [ES2015 module standard](http://www.2ality.com/2014/09/es6-modules-final.html).
-
-      An application that adheres to this standard requires a module loader to
-      load modules on request, and resolve inter-module dependencies.
-      Angular does not ship with a module loader and does not have a preference
-      for any particular 3rd party library (although most examples use SystemJS).
-      You may pick any module library that conforms to the standard.
-
-      Modules are typically named after the file in which the exported thing is defined.
-      The Angular [DatePipe](https://github.com/angular/angular/blob/master/modules/@angular/common/src/pipes/date_pipe.ts)
-      class belongs to a feature module named `date_pipe` in the file `date_pipe.ts`.
-
-      You rarely access Angular feature modules directly. You usually import them from one of the Angular [scoped packages](#scoped-package) such as `@angular/core`.
+  :marked
+    In this documentation, the term _module_ refers to a Dart compilation unit, such
+    as a library or package. If a Dart file has no `library` or `part`
+    directive, then that file itself is a library and thus a compilation
+    unit. For more information about compilation units, see
+    the Libraries and Scripts chapter in the
+    [Dart Language Specification](https://www.dartlang.org/docs/spec/).
 
 a#N
 .l-main-section#O
@@ -509,7 +385,7 @@ a#N
   ## PascalCase
 .l-sub-section
   :marked
-    The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples include: `Person` and `HeroDetailComponent`.
+    The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples: `Person`, `HeroDetailComponent`.
 
     This form is also known as **upper camel case** to distinguish it from **lower camel case**, which is simply called [camelCase](#camelcase). In this documentation, "PascalCase" means *upper camel case* and  "camelCase" means *lower camel case*.
 
@@ -541,22 +417,6 @@ a#N
 a#Q
 .l-main-section#R
 
-+ifDocsFor('ts|js')
-  :marked
-    ## Reactive forms
-  .l-sub-section
-    :marked
-      A technique for building Angular forms through code in a component.
-      The alternate technique is [Template-Driven Forms](#template-driven-forms).
-
-      When building reactive forms:
-      - The "source of truth" is the component. The validation is defined using code in the component.
-      - Each control is explicitly created in the component class with `new FormControl()` or with `FormBuilder`.
-      - The template input elements do *not* use `ngModel`.
-      - The associated Angular directives are all prefixed with `Form` such as `FormGroup`, `FormControl`, and `FormControlName`.
-
-      Reactive forms are powerful, flexible, and great for more complex data entry form scenarios such as dynamic generation of form controls.
-
 :marked
   ## Router
 .l-sub-section
@@ -568,6 +428,7 @@ a#Q
 
     The Angular [component router](!{docsLatest}/guide/router.html) is a richly featured mechanism for configuring and managing the entire view navigation process including the creation and destruction
     of views.
+
   +ifDocsFor('ts|js')
     :marked
       In most cases, components become attached to a [router](#router) by means
@@ -581,15 +442,6 @@ a#Q
 
       For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.
 
-+ifDocsFor('ts|js')
-  :marked
-    ## Router module
-  .l-sub-section
-    :marked
-      A separate [Angular module](#angular-module) that provides the necessary service providers and directives for navigating through application views.
-
-      For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.
-
 :marked
   ## Routing component
 .l-sub-section
@@ -600,31 +452,18 @@ a#Q
 
 .l-main-section#S
 
-+ifDocsFor('ts|js')
-  :marked
-    ## Scoped package
-  .l-sub-section
-    :marked
-      Angular modules are delivered within *scoped packages* such as `@angular/core`, `@angular/common`, `@angular/platform-browser-dynamic`,
-      `@angular/http`, and `@angular/router`.
-
-      A [*scoped package*](https://docs.npmjs.com/misc/scope) is a way to group related *npm* packages.
-
-      You import a scoped package the same way that you'd import a *normal* package.
-      The only difference, from a consumer perspective,
-      is that the *scoped package* name begins with the Angular *scope name*, `@angular`.
-
-    +makeExcerpt('architecture/ts/app/app.component.ts', 'import', '')
-
 a#snake-case
 :marked
   ## snake_case
 
 .l-sub-section
-  block snake-case-defn
-    :marked
-      The practice of writing compound words or phrases such that an
-      underscore (`_`) separates one word from the next. This form is also known as **underscore case**.
+  :marked
+    The practice of writing compound words or phrases such that an
+    underscore (`_`) separates one word from the next. This form is also known as **underscore case**.
+
+    Dart package names and filenames are spelled in snake_case,
+    [by convention](https://www.dartlang.org/guides/language/effective-dart/style#do-name-libraries-and-source-files-using-lowercasewithunderscores).
+    Examples: `angular_tour_of_heroes`, `app_component.dart`.
 
 :marked
   ## Service
@@ -636,23 +475,21 @@ a#snake-case
     Applications often require services such as a hero data service or a logging service.
 
     A service is a class with a focused purpose.
-    You often create a service to implement features that are
+    We often create a service to implement features that are
     independent from any specific view,
     provide shared data or logic across components, or encapsulate external interactions.
 
     For more information, see the [Services](!{docsLatest}/tutorial/toh-pt4.html) page of the [Tour of Heroes](!{docsLatest}/tutorial/) tutorial.
 
-a#structural-directive
-a#structural-directives
 :marked
-  ## Structural directives
+  ## Structural directive
 .l-sub-section
   :marked
     A category of [directive](#directive) that can
-    shape or reshape HTML layout, typically by adding and removing elements in the DOM.
-    The `ngIf` "conditional element" directive and the `ngFor` "repeater" directive are well-known examples.
+    shape or reshape HTML layout, typically by adding, removing, or manipulating
+    elements and their children; for example, the `ngIf` "conditional element" directive and the `ngFor` "repeater" directive.
 
-    Read more in the [_Structural Directives_](!{docsLatest}/guide/structural-directives.html) guide.
+    Read more in the [Structural Directives](!{docsLatest}/guide/structural-directives.html) page.
 
 .l-main-section#T
 :marked
@@ -663,26 +500,6 @@ a#structural-directives
     the support and continuing guidance of an Angular [directive](#directive),
     most notably a [component](#component).
 
-
-+ifDocsFor('ts|js')
-  :marked
-    ## Template-driven forms
-  .l-sub-section
-    :marked
-      A technique for building Angular forms using HTML forms and input elements in the view.
-      The alternate technique is [Reactive Forms](#reactive-forms).
-
-      When building template-driven forms:
-      - The "source of truth" is the template. The validation is defined using attributes on the individual input elements.
-      - [Two-way binding](#data-binding) with `ngModel` keeps the component model in synchronization with the user's entry into the input elements.
-      - Behind the scenes, Angular creates a new control for each input element, provided you have set up a `name` attribute and two-way binding for each input.
-      - The associated Angular directives are all prefixed with `ng` such as `ngForm`, `ngModel`, and `ngModelGroup`.
-
-      Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data entry form scenarios.
-
-      Read about how to build template-driven forms
-      in the [Forms](!{docsLatest}/guide/forms.html) page.
-
 :marked
   ## Template expression
 .l-sub-section
@@ -697,8 +514,8 @@ a#structural-directives
   ## Transpile
 .l-sub-section
   :marked
-    The process of transforming code written in one form of JavaScript
-    (for example, TypeScript) into another form of JavaScript  (for example, [ES5](#es5)).
+    The process of transforming code written in one language
+    (for example, TypeScript) into another (for example, [ES5](#es5)).
 
  :marked
   ## TypeScript
@@ -706,15 +523,6 @@ a#structural-directives
   :marked
     A version of JavaScript that supports most [ECMAScript 2015](#es2015)
     language features such as [decorators](#decorator).
-
-    TypeScript is also noteable for its optional typing system, which enables
-    compile-time type checking and strong tooling support (for example, "intellisense",
-    code completion, refactoring, and intelligent search). Many code editors
-    and IDEs support TypeScript either natively or with plugins.
-
-    TypeScript is the preferred language for Angular development although
-    you can use other JavaScript dialects such as [ES5](#es5).
-
     Read more about TypeScript at [typescript.org](http://www.typescriptlang.org/).
 
 a#U
@@ -744,23 +552,10 @@ a#Y
 :marked
   ## Zone
 .l-sub-section
-  block zone-defn
-    :marked
-      Zones are a mechanism for encapsulating and intercepting
-      a JavaScript application's asynchronous activity.
-
-      The browser DOM and JavaScript have a limited number
-      of asynchronous activities, activities such as DOM events (for example, clicks),
-      [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), and
-      [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)
-      calls to remote servers.
-
-      Zones intercept all of these activities and give a "zone client" the opportunity
-      to take action before and after the async activity finishes.
+  :marked
+    Zones are a mechanism for encapsulating and intercepting
+    a Dart application's asynchronous activity.
 
-      Angular runs your application in a zone where it can respond to
-      asynchronous events by checking for data changes, and updating
-      the information it displays via [data bindings](#data-binding).
+    Learn more about zones in [this article][zones].
 
-      Learn more about zones in this
-      [Brian Ford video](https://www.youtube.com/watch?v=3IqtmUscE_U).
+    [zones]: https://www.dartlang.org/articles/libraries/zones
