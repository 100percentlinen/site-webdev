diff --git a/./src/angular/_jade/ts/latest/glossary.jade b/./src/angular/glossary.jade
index 0bc84d0..82a110b 100644
--- a/./src/angular/_jade/ts/latest/glossary.jade
+++ b/./src/angular/glossary.jade
@@ -1,8 +1,12 @@
-block includes
-  //- include _util-fns
-
-//- current.path = ['docs', lang, 'latest', ...]
-- var lang = current.path[1]
+---
+layout: angular
+title: Glossary
+description: Brief definitions of the most important words in the Angular vocabulary
+---
+//- FilePath: src/angular/glossary.jade
+include _util-fns
+
+- var lang = 'dart'
 - var docsPath='/' + current.path[0]
 - var docsLatest='/angular';
 - var _at = lang === 'js' ? '' : '@'
@@ -33,29 +37,24 @@ a#aot
     to a<span if-docs="ts"> module</span> factory, meaning you don't need to include the Angular compiler in your JavaScript bundle.
     Ahead-of-time compiled applications also benefit from decreased load time and increased performance.
 
-+ifDocsFor('ts')
-  :marked
-    ## Angular module
-  .l-sub-section
-    :marked
-      Helps you organize an application into cohesive blocks of functionality.
-      An Angular module identifies the components, directives, and pipes that the application uses along with the list of external Angular modules that the application needs, such as `FormsModule`.
-
-      Every Angular application has an application root-module class. By convention, the class is
-      called `AppModule` and resides in a file named `app_module.dart`.
-
-      For details and examples, see the [Angular Modules (NgModule)](!{docsLatest}/guide/ngmodule.html) page.
-
 :marked
   ## Annotation
 .l-sub-section
   :marked
-    In practice, a synonym for [Decoration](#decorator).
+    When unqualified, _annotation_ refers to a Dart metadata
+    annotation (as opposed to, say, a type annotation).  A metadata
+    annotation begins with the character `@`, followed by either a reference
+    to a compile-time constant (such as [`Component`](#component)) or a call
+    to a constant constructor. See the [Dart Language Guide][metadata] for
+    details.
+
+    The corresponding term in TypeScript and JavaScript is
+    _decorator_.
+
+    [metadata]: https://www.dartlang.org/guides/language/language-tour#metadata
 
-a#attribute-directive
-a#attribute-directives
 :marked
-  ## Attribute directives
+  ## Attribute directive
 .l-sub-section
   :marked
     A category of [directive](#directive) that can listen to and modify the behavior of
@@ -68,47 +67,6 @@ a#attribute-directives
 
 .l-main-section#B
 
-+ifDocsFor('ts|js')
-  :marked
-    ## Barrel
-  .l-sub-section
-    :marked
-      A way to *roll up exports* from several ES2015 modules into a single convenient ES2015 module.
-      The barrel itself is an ES2015 module file that re-exports *selected* exports of other ES2015 modules.
-
-      For example, imagine three ES2015 modules in a `heroes` folder:
-    code-example.
-      // heroes/hero.component.ts
-      export class HeroComponent {}
-
-      // heroes/hero.model.ts
-      export class Hero {}
-
-      // heroes/hero.service.ts
-      export class HeroService {}
-    :marked
-      Without a barrel, a consumer needs three import statements:
-    code-example.
-      import { HeroComponent } from '../heroes/hero.component.ts';
-      import { Hero }          from '../heroes/hero.model.ts';
-      import { HeroService }   from '../heroes/hero.service.ts';
-    :marked
-      You can add a barrel to the `heroes` folder (called `index`, by convention) that exports all of these items:
-    code-example.
-      export * from './hero.model.ts';   // re-export all of its exports
-      export * from './hero.service.ts'; // re-export all of its exports
-      export { HeroComponent } from './hero.component.ts'; // re-export the named thing
-    :marked
-      Now a consumer can import what it needs from the barrel.
-    code-example.
-      import { Hero, HeroService } from '../heroes'; // index is implied
-    :marked
-      The Angular [scoped packages](#scoped-package) each have a barrel named `index`.
-
-    .alert.is-important
-      :marked
-        You can often achieve the same result using [Angular modules](#angular-module) instead.
-
 :marked
   ## Binding
 .l-sub-section
@@ -124,13 +82,17 @@ a#attribute-directives
   ## Bootstrap
 .l-sub-section
   :marked
-    You launch an Angular application by "bootstrapping" it using the application root Angular module (`AppModule`).
+    You launch an Angular application by "bootstrapping" it using the [bootstrap][bootstrap] method.
     Bootstrapping identifies an application's top level "root" [component](#component),
     which is the first component that is loaded for the application.
+    Bootstrapping optionally registers service [providers](#provider) with the
+    [dependency injection system](#dependency-injection).
     For more information, see the [Setup](!{docsLatest}/guide/setup.html) page.
 
     You can bootstrap multiple apps in the same `index.html`, each app with its own top-level root.
 
+    [bootstrap]: !{docsLatest}/api/angular2.platform.browser/bootstrap.html
+
 .l-main-section#C
 :marked
   ## camelCase
@@ -144,7 +106,6 @@ a#attribute-directives
     camelCase is also known as *lower camel case* to distinguish it from *upper camel case*, or [PascalCase](#pascalcase).
     In Angular documentation, "camelCase" always means *lower camel case*.
 
-a#component
 :marked
   ## Component
 .l-sub-section
@@ -205,30 +166,8 @@ a#decoration
   ## Decorator | decoration
 .l-sub-section
   :marked
-    A *function* that adds metadata to a class, its members (properties, methods) and function arguments.
-
-    Decorators are a JavaScript language [feature](https://github.com/wycats/javascript-decorators), implemented in TypeScript and proposed for ES2016 (also known as ES7).
-
-    To apply a decorator, position it immediately above or to the left of the item it decorates.
-
-    Angular has its own set of decorators to help it interoperate with your application parts.
-    The following example is a `@Component` decorator that identifies a
-    class as an Angular [component](#component) and an `@Input` decorator applied to the `name` property
-    of that component. The elided object argument to the `@Component` decorator would contain the pertinent component metadata.
-    ```
-    @Component({...})
-    export class AppComponent {
-      constructor(@Inject('SpecialFoo') public foo:Foo) {}
-      @Input() name:string;
-    }
-    ```
-    The scope of a decorator is limited to the language feature
-    that it decorates. None of the decorations shown here will "leak" to other
-    classes that follow it in the file.
-
-  .alert.is-important
-    :marked
-      Always include parentheses `()` when applying a decorator.
+    JavaScript terms that, in this documentation, refer to an
+    [annotation](#annotation).
 
 :marked
   ## Dependency injection
@@ -243,14 +182,13 @@ a#decoration
 
     These parts often rely on other parts. An Angular [component](#component)
     part might rely on a service part to get data or perform a calculation. When
-    part "A" relies on another part "B," you say that "A" depends on "B" and
-    that "B" is a dependency of "A."
+    part "A" relies on another part "B", you say that "A" depends on "B" and
+    that "B" is a dependency of "A".
 
     You can ask a "dependency injection system" to create "A"
     for us and handle all the dependencies.
-    If "A" needs "B" and "B" needs "C," the system resolves that chain of dependencies
-    and returns a fully prepared instance of "A."
-
+    If "A" needs "B" and "B" needs "C", the system resolves that chain of dependencies
+    and returns a fully prepared instance of "A".
 
     Angular provides and relies upon its own sophisticated
     dependency-injection system
@@ -283,8 +221,6 @@ a#decoration
 
     Read more in the [Dependency Injection](!{docsLatest}/guide/dependency-injection.html) page.
 
-a#directive
-a#directives
 :marked
   ## Directive
 .l-sub-section
@@ -326,18 +262,6 @@ a#directives
   :marked
     The [official JavaScript language specification](https://en.wikipedia.org/wiki/ECMAScript).
 
-    The latest approved version of JavaScript is
-    [ECMAScript 2016](http://www.ecma-international.org/ecma-262/7.0/)
-    (also known as "ES2016" or "ES7"). Many Angular developers write their applications
-    in ES7 or a dialect that strives to be
-    compatible with it, such as [TypeScript](#typescript).
-
-    Most modern browsers only support the much older "ECMAScript 5" (also known as "ES5") standard.
-    Applications written in ES2016, ES2015, or one of their dialects must be [transpiled](#transpile)
-    to ES5 JavaScript.
-
-    Angular developers can write in ES5 directly.
-
 :marked
   ## ES2015
 .l-sub-section
@@ -388,7 +312,7 @@ a#H
     or displayed between element tags, as in this example.
 
   code-example(language="html" escape="html").
-    <label>My current hero is {{hero.name}}</label>
+    <label>My current hero is {% raw %}{{hero.name}}{% endraw %}</label>
 
   :marked
     Read more about [interpolation](!{docsLatest}/guide/template-syntax.html#interpolation) in the
@@ -443,37 +367,13 @@ a#jit
 :marked
   ## Module
 .l-sub-section
-  .alert.is-important
-    :marked
-     Angular has the following types of modules:
-     - [Angular modules](#angular-module).
-     For details and examples, see the [Angular Modules](!{docsLatest}/guide/ngmodule.html) page.
-     - ES2015 modules, as described in this section.
-
   :marked
-    A cohesive block of code dedicated to a single purpose.
-
-    Angular apps are modular.
-
-    In general, you assemble an application from many modules, both the ones you write and the ones you acquire from others.
-
-    A module *exports* something of value in that code, typically one thing such as a class;
-    a module that needs that class *imports* it.
-
-    The structure of Angular modules and the import/export syntax
-    is based on the [ES2015 module standard](http://www.2ality.com/2014/09/es6-modules-final.html).
-
-    An application that adheres to this standard requires a module loader to
-    load modules on request and resolve inter-module dependencies.
-    Angular doesn't include a module loader and doesn't have a preference
-    for any particular third-party library (although most examples use SystemJS).
-    You can use any module library that conforms to the standard.
-
-    Modules are typically named after the file in which the exported thing is defined.
-    The Angular [DatePipe](https://github.com/angular/angular/blob/master/modules/@angular/common/src/pipes/date_pipe.ts)
-    class belongs to a feature module named `date_pipe` in the file `date_pipe.dart`.
-
-    You rarely access Angular feature modules directly. You usually import them from an Angular [scoped package](#scoped-package) such as `@angular/core`.
+    In this documentation, the term _module_ refers to a Dart compilation unit, such
+    as a library or package. If a Dart file has no `library` or `part`
+    directive, then that file itself is a library and thus a compilation
+    unit. For more information about compilation units, see
+    the Libraries and Scripts chapter in the
+    [Dart Language Specification](https://www.dartlang.org/docs/spec/).
 
 a#N
 .l-main-section#O
@@ -524,8 +424,8 @@ a#N
     a numeric value in the local currency.
 
   code-example(language="html" escape="html").
-    <label>Price: </label>{{product.price | currency}}
-
+    <label>Price: </label>{% raw %}{{product.price | currency}}{% endraw %}
+  
   :marked
     You can also write your own custom pipes.
     Read more in the page on [pipes](!{docsLatest}/guide/pipes.html).
@@ -542,21 +442,6 @@ a#Q
 .l-main-section#R
 
 :marked
-  ## Reactive forms
-.l-sub-section
-  :marked
-    A technique for building Angular forms through code in a component.
-    The alternative technique is [template-driven forms](#template-driven-forms).
-
-    When building reactive forms:
-    - The "source of truth" is the component. The validation is defined using code in the component.
-    - Each control is explicitly created in the component class with `new FormControl()` or with `FormBuilder`.
-    - The template input elements do *not* use `ngModel`.
-    - The associated Angular directives are all prefixed with `Form`, such as `FormGroup`, `FormControl`, and `FormControlName`.
-
-    Reactive forms are powerful, flexible, and a good choice for more complex data-entry form scenarios, such as dynamic generation of form controls.
-
-:marked
   ## Router
 .l-sub-section
   :marked
@@ -581,14 +466,6 @@ a#Q
       For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.
 
 :marked
-  ## Router module
-.l-sub-section
-  :marked
-    A separate [Angular module](#angular-module) that provides the necessary service providers and directives for navigating through application views.
-
-    For more information, see the [Routing & Navigation](!{docsLatest}/guide/router.html) page.
-
-:marked
   ## Routing component
 .l-sub-section
   :marked
@@ -599,22 +476,6 @@ a#Q
 .l-main-section#S
 
 :marked
-  ## Scoped package
-.l-sub-section
-  :marked
-    A way to group related *npm* packages.
-    Read more at the [npm-scope](https://docs.npmjs.com/misc/scope) page.
-
-    Angular modules are delivered within *scoped packages* such as `@angular/core`,
-    `@angular/common`, `@angular/platform-browser-dynamic`, `@angular/http`, and `@angular/router`.
-
-    Import a scoped package the same way that you import a normal package.
-    The only difference, from a consumer perspective,
-    is that the scoped package name begins with the Angular *scope name*, `@angular`.
-
-  +makeExcerpt('architecture/ts/app/app.component.ts', 'import', '')
-
-:marked
   ## Service
 .l-sub-section
   :marked
@@ -640,11 +501,12 @@ a#snake-case
     The practice of writing compound words or phrases such that an
     underscore (`_`) separates one word from the next. This form is also known as *underscore case*.
 
-a#structural-directive
-a#structural-directives
+    Dart package names and filenames are spelled in snake_case,
+    [by convention](https://www.dartlang.org/guides/language/effective-dart/style#do-name-libraries-and-source-files-using-lowercasewithunderscores).
+    For example, `angular_tour_of_heroes` and `app_component.dart`.
 
 :marked
-  ## Structural directives
+  ## Structural directive
 .l-sub-section
   :marked
     A category of [directive](#directive) that can
@@ -663,24 +525,6 @@ a#structural-directives
     most notably a [component](#component).
 
 :marked
-  ## Template-driven forms
-.l-sub-section
-  :marked
-    A technique for building Angular forms using HTML forms and input elements in the view.
-    The alternate technique is [Reactive Forms](#reactive-forms).
-
-    When building template-driven forms:
-    - The "source of truth" is the template. The validation is defined using attributes on the individual input elements.
-    - [Two-way binding](#data-binding) with `ngModel` keeps the component model synchronized with the user's entry into the input elements.
-    - Behind the scenes, Angular creates a new control for each input element, provided you have set up a `name` attribute and two-way binding for each input.
-    - The associated Angular directives are all prefixed with `ng` such as `ngForm`, `ngModel`, and `ngModelGroup`.
-
-    Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data-entry form scenarios.
-
-    Read about how to build template-driven forms
-    in the [Forms](!{docsLatest}/guide/forms.html) page.
-
-:marked
   ## Template expression
 .l-sub-section
   :marked
@@ -695,8 +539,8 @@ a#structural-directives
   ## Transpile
 .l-sub-section
   :marked
-    The process of transforming code written in one form of JavaScript
-    (such as TypeScript) into another form of JavaScript  (such as [ES5](#es5)).
+    The process of transforming code written in one language
+    (for example, Dart or TypeScript) into another (such as [ES5](#es5)).
 
 :marked
   ## TypeScript
@@ -704,15 +548,6 @@ a#structural-directives
   :marked
     A version of JavaScript that supports most [ECMAScript 2015](#es2015)
     language features such as [decorators](#decorator).
-
-    TypeScript is also notable for its optional typing system, which provides
-    compile-time type checking and strong tooling support (such as "intellisense,"
-    code completion, refactoring, and intelligent search). Many code editors
-    and IDEs support TypeScript either natively or with plugins.
-
-    TypeScript is the preferred language for Angular development, although
-    you can use other JavaScript dialects such as [ES5](#es5).
-
     Read more about TypeScript at [typescriptlang.org](http://www.typescriptlang.org/).
 
 a#U
@@ -743,21 +578,9 @@ a#Y
   ## Zone
 .l-sub-section
   :marked
-    A mechanism for encapsulating and intercepting
-    a JavaScript application's asynchronous activity.
-
-    The browser DOM and JavaScript have a limited number
-    of asynchronous activities, such as DOM events (for example, clicks),
-    [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), and
-    [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)
-    calls to remote servers.
-
-    Zones intercept all of these activities and give a "zone client" the opportunity
-    to take action before and after the async activity finishes.
+    Zones are a mechanism for encapsulating and intercepting
+    a Dart application's asynchronous activity.
 
-    Angular runs your application in a zone where it can respond to
-    asynchronous events by checking for data changes and updating
-    the information it displays via [data bindings](#data-binding).
+    Read more about zones in [this article][zones].
 
-    Learn more about zones in this
-    [Brian Ford video](https://www.youtube.com/watch?v=3IqtmUscE_U).
+    [zones]: https://www.dartlang.org/articles/libraries/zones
