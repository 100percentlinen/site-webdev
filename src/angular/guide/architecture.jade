---
layout: angular
title: Architecture Overview
description: The basic building blocks of Angular applications
sideNavGroup: basic
prevpage:
  title: Learning Angular
  url: /angular/guide/learning-angular
nextpage:
  title: Displaying Data
  url: /angular/guide/displaying-data
---
//- FilePath: src/angular/guide/architecture.jade
extends /_jade/ts/_cache/guide/architecture.jade

block includes
  - var _example = 'architecture';
  include ../_util-fns
  - var _library_module = 'library'
  - var _at_angular = 'angular2'

block angular-intro
  :marked
    AngularDart (which we usually call simply Angular in this documentation)
    is a framework for building client applications in HTML and Dart. 
    It is published as the 
    [**angular2**](https://pub.dartlang.org/packages/angular2) package, which
    (like many other Dart packages) is available via the Pub tool.

block angular-modules
  :marked
    Angular apps are modular; that is, applications are assembled from many **modules**.

    In this guide, the term **_module_** refers to a Dart compilation unit, such
    as a library, or a package. (If a Dart file has no `library` or `part`
    directive, then that file itself is a library and thus a compilation
    unit.) For more information about compilation units, see
    the chapter on "Libraries and Scripts" in the
    [Dart Language Specification](https://www.dartlang.org/docs/spec/).
    <br class="l-clear-both">
    
    Every Angular app has at least one module, the _root module_.
    While the _root module_ may be the only module in a small application,
    most apps have many more _feature modules_, 
    each a cohesive block of code dedicated to an application domain,
    a workflow, or a closely related set of capabilities. 

    The simplest of root modules defines a single _root_
    [**component**](#components) class such as this one:

  +makeExample('app/app.component.ts', 'export')

  :marked
    By convention, the name of the root component is `AppComponent`.

block angular-libraries
  :marked
    Angular ships as a collection of libraries within the
    [**angular2**](https://pub.dartlang.org/packages/angular2) package.

    Each Angular library name begins with the `!{_at_angular}` prefix.
    For example, the main Angular library is `!{_at_angular}/core`,
    which most application modules will import as follows:
    <br class="l-clear-both">

  +makeExcerpt('app/app.component.ts', 'import')

  :marked
    There are other important Angular libraries too, such as `!{_at_angular}/common`
    and `!{_at_angular}/router`.

block ts-decorator
  :marked
    Annotations often have configuration parameters.
    The `@Component` annotation takes parameters to provide the
    information Angular needs to create and present the component and its view.

    Here are a few of the possible `@Component` parameters:

block dart-directives
  :marked
    - `directives`: !{_array} of the components or directives that *this* template requires.
    For Angular to process application tags, like `<hero-detail>`, that appear in a
    template, the component corresponding to the tag must be declared in the
    `directives` !{_array}.

block dart-bool
  .callout.is-important
    :marked
      In Dart, **the only value that is true is the boolean value `true`**; all
      other values are false. JavaScript and TypeScript, in contrast, treat values
      such as 1 and most non-null objects as true. For this reason, the JavaScript
      and TypeScript versions of this app can use just `selectedHero` as the value
      of the `*ngIf` expression. The Dart version must use a boolean operator such
      as `!=` instead.

block registering-providers
  :marked
    You can register providers at any level of the application component tree.
    In general, add providers when bootstrapping the application so that
    the same instance of a service is available everywhere.

  +makeExcerpt('app/main.ts', 'bootstrap')

block angular-feature-testing
  :marked
    > **Testing**: The testing documentation will cover how to run unit tests 
    on your application parts as they interact with the Angular framework. 
    Also see [package:test](https://pub.dartlang.org/packages/test).