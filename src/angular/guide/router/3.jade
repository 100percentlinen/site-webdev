---
layout: angular
title: Imperative Navigation and Route Parameters
sideNavGroup: advanced
prevpage:
  title: Default, Redirect and Wildcard Routes
  url: /angular/guide/router/2
nextpage:
  title: Child & Relative Routes
  url: /angular/guide/router/4
---
//- FilePath: src/angular/guide/router/crisis-center-3.jade
include ../../_util-fns
- var _example = 'router';
include _milestone-nav
script $('#router-milestone').val('3')

//- .l-main-section
  ## Milestone 3: Heroes feature

:marked
  You've seen how to navigate using the `RouterLink` directive,
  now you'll learn how to

  * Organize the app into *features*, or *feature groups*
  * Navigate imperatively from one component to another
  * Pass required and optional information in route parameters

  This example has capabilities very similar to the
  [Tour of Heroes Tutorial Part 5](../../tutorial/toh-pt5.html),
  and you'll be copying much of the code from there.

  Here's how the user will experience this version of the app:

figure.image-display
  img(src='/resources/images/devguide/router/router-2-anim.gif' alt="App in action" )

:marked
  A typical application has multiple *features* or *feature groups*,
  each dedicated to a particular business purpose.

  While you could continue to add files to the `lib` folder,
  developers generally prefer to organize their apps so that most, if not all,
  files implementing a feature are grouped into a separate folder.

  You are about to break up the app into different feature groups, each with its own concerns.

:marked
  ## Add Heroes functionality

  Follow these steps:
  
  - Create the `lib/heroes` folder &mdash; you'll be adding files implementing *hero management* there.
  - Copy the following files from [toh-5/lib](https://github.com/angular-examples/toh-5)
    **into `lib` (_not_ yet `lib/heroes`)**:
    - `heroes.dart`
    - `hero_detail_component.*`, that is, the CSS, Dart and HTML files
    - `hero_service.dart`
    - `heroes_component.*`, the CSS, Dart and HTML files; <br>
      **Note**: this will overwrite the local Dart file.
    - `mock_heroes.dart`
  - Use your IDE to refactor/move all of these newly copied files into the `lib/heroes` folder.
  - In `heroes_component.html`, rename the `<ul>` element class to `items` (from `heroes`).
  - Add the `HeroService` to the `providers` list of `AppComponent`
    so that it is available everywhere in the app. This should be the result:

+makeExcerpt('lib/app_component_3.dart (v1)')

:marked
  **Refresh the browser** and you should see heroes in the heroes list.
  You can select heroes, but not yet view hero details. You'll address that next.

  ## *Hero* feature routing requirements

  The heroes feature has two interacting components, the hero list and the hero detail.
  The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.

  The detail view is different. It displays a particular hero. It can't know which hero to show on its own.
  That information must come from outside.

  When the user selects a hero from the list, the app should navigate to the detail view 
  and show that hero.
  You tell the detail view which hero to display by including the selected hero's id in the route URL.

  ## *Hero* feature route configuration

  With that plan in mind, start by making changes to the router configuration
  in `app_component.dart`. After including an appropriate import for
  `HeroDetailComponent`, **add** the following route to the application's route
  configuation (the other route definitions remain unchanged):

+makeExcerpt('lib/app_component_3.dart', 'HeroDetail-route', '')

:marked
  ## Route definition with a parameter

  The route to `HeroDetailComponent` has a twist.
  Notice the `:id` token at the end of the path;
  that creates a slot in the path for a **Route Parameter**.
  In this case, the router will insert the `id` of a hero into that slot.

  If you tell the router to navigate to the detail component and display "Magneta" (having id 15),
  you'd expect a hero id to appear in the browser URL like this:

code-example(format="nocode").
  localhost:3000/hero/15

:marked
  If a user enters that URL into the browser address bar, the router should recognize the
  pattern and go to the same "Magneta" detail view.

//- We don't need to call out to this difference at this point, because it is
//- just natural to encode the id as a required parameter. Also, there is a section
//- dedicated to this below (#optional-route-parameters).
//- Excluding this callout for now.
//- .callout.is-helpful
  header Route parameter: Required or optional?
  :marked
    Embedding the route parameter token, `:id`, 
    in the route definition path is a good choice for this scenario
    because the `id` is *required* by the `HeroDetailComponent` and because
    the value `15` in the path clearly distinguishes the route to "Magneta" from
    a route for some other hero.

    An [optional route parameter](#optional-route-parameters) might be a better choice if 
    you were passing an *optional* value to `HeroDetailComponent`.

a#navigate
:marked
  ## Navigate to hero detail imperatively

  Users *won't* navigate to the detail component by clicking a link
  so you won't be adding a new `RouterLink` anchor tag to the shell.
  Instead, when the user *clicks* a hero in the list, you'll ask the router
  to navigate to the hero detail view for the selected hero.

  Make the following few changes to the heroes component template:
  
  - Drop the "My" from the `h2` text, so it reads just `Heroes`.
  - Drop the `<div *ngIf="selectedHero != null">...</div>` which conditionally displayed 
    a button used to request that the app navigate to the detailed view of the selected hero
    via a call to `gotoDetail()` &mdash; that you'll reuse shortly.

+makeExample('lib/heroes/heroes_component.html')

:marked
  The template has an `*ngFor` element that [you've seen before](../displaying-data.html#ngFor).
  There's a `(click)` [event binding](../template-syntax.html#event-binding) to the component's 
  `onSelect` method to which you add a call to `gotoDetail`:

+makeExcerpt('app/heroes/heroes.component.ts', 'onSelect')

a#route-parameters
:marked
  **Refresh the browser** and select a hero and the app should navigate to the hero's detail view.

  [As explained in the tutorial](../../tutorial/toh-pt5.html#update-the-_heroescomponent_-class-),
  `gotoDetail` calls the router's **`navigate`** method with a _link parameters list_.
  The router composes a destination URL from this list, for example:
  `localhost:3000/hero/15`.

a#get-route-parameter
:marked
  ## Getting the route parameter in the details view

  How does the target `HeroDetailComponent` learn about that `id`?
  It's not by analyzing the URL since that's the router's job.

  The router extracts the route parameter (`id:15`) from the URL and supplies it to
  the `HeroDetailComponent` via the **RouteParams** service. This service is used
  in the `ngOnInit` method (see the 
  [tutorial](../../tutorial/toh-pt5.html#update-the-_heroescomponent_-class-) for details):

+makeTabs(
  `router/dart/lib/heroes/hero_detail_component_0.dart,
  router/dart/lib/heroes/hero_detail_component.html,
  router/dart/lib/heroes/hero_detail_component.css`,
  '',
  `lib/heroes/hero_detail_component.dart,
  lib/heroes/hero_detail_component.html,
  lib/heroes/hero_detail_component.css`)

//- a#activated-route
//- :marked
  ## ActivatedRoute: the one-stop-shop for route information

  Each route contains information about its path, data parameters, URL segment and much more.
  All of this information is available in an injected service provided by the router called the
  [ActivatedRoute](../api/router/index/ActivatedRoute-interface.html).

  The `ActivatedRoute` contains all the information you need from the current route component as well as ways to get information
  about other activated routes in the `RouterState`.

//- .l-sub-section
  :marked
    **`url`**: An `Observable` of the route path(s). The value is provided as an array of strings for each part of the route path.

    **`data`**: An `Observable` that contains the `data` object provided for the route. Also contains any resolved values from the [resolve guard](#resolve-guard).

    **`params`**: An `Observable` that contains the required and [optional parameters](#optional-route-parameters) specific to the route.

    **`queryParams`**: An `Observable` that contains the [query parameters](#query-parameters) available to all routes.

    **`fragment`**:  An `Observable` of the URL [fragment](#fragment) available to all routes.

    **`outlet`**: The name of the `RouterOutlet` used to render the route. For an unnamed outlet, the outlet name is _primary_.

    **`routeConfig`**: The route configuration used for the route that contains the origin path.

    **`parent`**: an `ActivatedRoute` that contains the information from the parent route when using [child routes](#child-routing-component).

    **`firstChild`**: contains the first `ActivatedRoute` in the list of child routes.

    **`children`**: contains all the [child routes](#child-routing-component) activated under the current route.

//- Skipping over all of the rest of this subsection

//- a#snapshot
//- :marked
  ### _Snapshot_: the _no-observable_ alternative
  _This_ application won't re-use the `HeroDetailComponent`.
  The user always returns to the hero list to select another hero to view.
  There's no way to navigate from one hero detail to another hero detail
  without visiting the list component in between.
  Therefore, the router creates a new `HeroDetailComponent` instance every time.

  When you know for certain that a `HeroDetailComponent` instance will *never, never, ever*
  be re-used, you can simplify the code with the *snapshot*.

  The `route.snapshot` provides the initial value of the route parameters.
  You can access the parameters directly without subscribing or adding observable operators.
  It's much simpler to write and read:

//- Skipping over all of the rest of this subsection

a#nav-to-list
:marked
  ## Navigating back to the list component

  The `HeroDetailComponent` _Back_ button has an event binding to the 
  [goBack method](../../tutorial/toh-pt5.html#find-our-way-back) that navigates 
  backward one step in the browser's history stack using the `Location` service:

+makeExcerpt('app/heroes/hero-detail.component.0.ts', 'goBack', '')

.l-main-section#optional-route-parameters
:marked
  ## Route Parameters: Required or optional?

  Use [*route parameters*](#route-parameters) to specify a *required* parameter value *within* the route URL
  as you do when navigating to the `HeroDetailComponent` in order to view the hero with *id* 15:

code-example(format="nocode").
  localhost:3000/hero/15

:marked
  You may sometimes wish to add *optional* information to a route request.
  For example, when returning to the heroes list from the hero detail view, 
  it might be nice if the viewed hero was preselected in the list.

figure.image-display
  img(src='/resources/images/devguide/router/selected-hero.png' alt="Selected hero")

:marked
  This becomes possible if you can include the viewed hero's `id` in the URL when
  returning from the `HeroDetailComponent`, a scenario you'll pursue in a moment.

  Optional information takes other forms:
  search criteria are often loosely structured, for example, `name='wind*'`;
  multiple values are common &mdash; `after='12/31/2015'&before='1/1/2017'`.

  These kinds of parameters don't fit easily in a URL *path*. Even if you could define a suitable URL token scheme,
  doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.

  Optional parameters are the ideal vehicle for conveying arbitrarily complex information during navigation.
  Optional parameters aren't involved in pattern matching and afford flexibility of expression.

  The router supports navigation with optional parameters as well as required route parameters.
  Define _optional_ parameters in a separate object _after_ you define the required route parameters.

  In general, prefer a *required route parameter* when
  the value is mandatory (for example, if necessary to distinguish one route path from another);
  prefer an *optional parameter* when the value is optional, complex, and/or multi-variate.

:marked
  ## Heroes list: Optionally selecting a hero

:marked
  As suggested above, you can implement the following behavior using an _optional_ route parameter:
  when returning to the heroes list from the hero detail view, preselect the viewed hero.

  Add the router as a constructor parameter. Then use the router `navigate` method
  with route parameters similar to those used [previously in `HeroesComponent`](#navigate);
  the only difference here is that you'll conditionally include an id only after a 
  hero has been successfully returned from the hero service (that is, when `hero` is not null):
  
+makeExcerpt('app/heroes/hero-detail.component.ts', 'goBack')

.l-sub-section
  :marked
    With this update to `goBack`, the `Location` service is no longer needed. Consider removing the
    `_location` class field, corresponding constructor parameter and `Location` import.

:marked
  **Refresh the browser**, select a hero and then click the _Back_ button to return to the heroes list.
  Notice that the URL now ends with a query parameter like this: `.../heroes?id=15`.

.l-sub-section
  :marked
    The router can also encode parameters using the 
    [matrix URL notation](http://www.w3.org/DesignIssues/MatrixURIs.html), 
    such as `.../heroes;id=15;foo=bar`. You'll see this
    [later](crisis-center-4.html), once the crisis center feature is fully
    fleshed out.

:marked
  Despite the URL query parameter, the hero isn't selected. You'll need to adjust the original heroes
  component `ngOnInit` method for that.

  Using the hero detail component as a model, inject a `RouteParams` into the heroes
  component. Then edit `ngOnInit` so that, _after_ the heroes have been retrieved you

  - Extract an id from the route params, if any.
  - If an optional id _was_ provided, then set `selectedHero` to the hero with the corresponding id.

  You could use `Future.then` to implement the proper code execution order. Instead, declare `ngOnInit` as
  asynchronous and `await` for `getHeroes` to return like this:

+makeExcerpt('app/heroes/heroes.component.ts', 'ngOnInit')

//- ## Milestone 3 wrap-up
a#wrap-up
:marked
  ## Application code

  After these changes, the folder structure looks like this:

.filetree
  .file router_example
  .children
    .file lib
    .children
      .file heroes
      .children
        .file hero.dart
        .file hero_detail_component.{css,dart,html}
        .file hero_service.dart
        .file heroes_component.{css,dart,html}
        .file mock_heroes.dart
      .file app_component.dart
      .file crisis_center_component.dart
    .file web
    .children
      .file index.html
      .file main.dart
      .file styles.css

:marked
  Here are the relevant files for this version of the sample application:

+makeTabs(
  `router/dart/lib/app_component_3.dart,
  router/dart/lib/heroes/hero_detail_component.dart,
  router/dart/lib/heroes/heroes_component.dart`,
  '',
  `lib/app_component.dart,
  lib/heroes/hero_detail_component.dart,
  lib/heroes/heroes_component.dart`)
